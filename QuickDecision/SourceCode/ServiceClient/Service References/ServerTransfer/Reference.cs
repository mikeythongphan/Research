//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace vnyi.ServiceClient.ServerTransfer {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServerTransfer.ITransferService")]
    public interface ITransferService {
        
        // CODEGEN: Generating message contract since the wrapper name (DownloadRequest) of message DownloadRequest does not match the default value (DownloadFile)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferService/DownloadFile", ReplyAction="http://tempuri.org/ITransferService/DownloadFileResponse")]
        vnyi.ServiceClient.ServerTransfer.RemoteFileInfo DownloadFile(vnyi.ServiceClient.ServerTransfer.DownloadRequest request);
        
        // CODEGEN: Generating message contract since the wrapper name (RemoteFileInfo) of message RemoteFileInfo does not match the default value (UploadFile)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferService/UploadFile", ReplyAction="http://tempuri.org/ITransferService/UploadFileResponse")]
        vnyi.ServiceClient.ServerTransfer.Status UploadFile(vnyi.ServiceClient.ServerTransfer.RemoteFileInfo request);
        
        // CODEGEN: Generating message contract since the wrapper name (KeyReques) of message KeyReques does not match the default value (GetDirectoryWithKey)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferService/GetDirectoryWithKey", ReplyAction="http://tempuri.org/ITransferService/GetDirectoryWithKeyResponse")]
        vnyi.ServiceClient.ServerTransfer.Status GetDirectoryWithKey(vnyi.ServiceClient.ServerTransfer.KeyReques request);
        
        // CODEGEN: Generating message contract since the wrapper name (MessegerResquest) of message MessegerResquest does not match the default value (LogerMesseger)
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITransferService/LogerMesseger", ReplyAction="http://tempuri.org/ITransferService/LogerMessegerResponse")]
        vnyi.ServiceClient.ServerTransfer.Status LogerMesseger(vnyi.ServiceClient.ServerTransfer.MessegerResquest request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="DownloadRequest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class DownloadRequest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string IPAddress;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string Key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public int TopRecord;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string Type;
        
        public DownloadRequest() {
        }
        
        public DownloadRequest(string IPAddress, string Key, int TopRecord, string Type) {
            this.IPAddress = IPAddress;
            this.Key = Key;
            this.TopRecord = TopRecord;
            this.Type = Type;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="RemoteFileInfo", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class RemoteFileInfo {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FileName;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string FilePath;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public string Key;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public long Length;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public int RowVersion;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public int TotalRecord;
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://tempuri.org/")]
        public bool isSuccess;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public System.IO.Stream FileByteStream;
        
        public RemoteFileInfo() {
        }
        
        public RemoteFileInfo(string FileName, string FilePath, string Key, long Length, int RowVersion, int TotalRecord, bool isSuccess, System.IO.Stream FileByteStream) {
            this.FileName = FileName;
            this.FilePath = FilePath;
            this.Key = Key;
            this.Length = Length;
            this.RowVersion = RowVersion;
            this.TotalRecord = TotalRecord;
            this.isSuccess = isSuccess;
            this.FileByteStream = FileByteStream;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="Status", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class Status {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public bool isSucess;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string url;
        
        public Status() {
        }
        
        public Status(bool isSucess, string url) {
            this.isSucess = isSucess;
            this.url = url;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="KeyReques", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class KeyReques {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string Key;
        
        public KeyReques() {
        }
        
        public KeyReques(string Key) {
            this.Key = Key;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="MessegerResquest", WrapperNamespace="http://tempuri.org/", IsWrapped=true)]
    public partial class MessegerResquest {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=0)]
        public string Content;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=1)]
        public string FileName;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=2)]
        public string FilePath;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=3)]
        public string Key;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=4)]
        public int RowVersionLog;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=5)]
        public vnyi.Meta.log.Status Status;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=6)]
        public string Title;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://tempuri.org/", Order=7)]
        public int Type;
        
        public MessegerResquest() {
        }
        
        public MessegerResquest(string Content, string FileName, string FilePath, string Key, int RowVersionLog, vnyi.Meta.log.Status Status, string Title, int Type) {
            this.Content = Content;
            this.FileName = FileName;
            this.FilePath = FilePath;
            this.Key = Key;
            this.RowVersionLog = RowVersionLog;
            this.Status = Status;
            this.Title = Title;
            this.Type = Type;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITransferServiceChannel : vnyi.ServiceClient.ServerTransfer.ITransferService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TransferServiceClient : System.ServiceModel.ClientBase<vnyi.ServiceClient.ServerTransfer.ITransferService>, vnyi.ServiceClient.ServerTransfer.ITransferService {
        
        public TransferServiceClient() {
        }
        
        public TransferServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TransferServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransferServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TransferServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        vnyi.ServiceClient.ServerTransfer.RemoteFileInfo vnyi.ServiceClient.ServerTransfer.ITransferService.DownloadFile(vnyi.ServiceClient.ServerTransfer.DownloadRequest request) {
            return base.Channel.DownloadFile(request);
        }
        
        public string DownloadFile(string IPAddress, ref string Key, int TopRecord, string Type, out string FilePath, out long Length, out int RowVersion, out int TotalRecord, out bool isSuccess, out System.IO.Stream FileByteStream) {
            vnyi.ServiceClient.ServerTransfer.DownloadRequest inValue = new vnyi.ServiceClient.ServerTransfer.DownloadRequest();
            inValue.IPAddress = IPAddress;
            inValue.Key = Key;
            inValue.TopRecord = TopRecord;
            inValue.Type = Type;
            vnyi.ServiceClient.ServerTransfer.RemoteFileInfo retVal = ((vnyi.ServiceClient.ServerTransfer.ITransferService)(this)).DownloadFile(inValue);
            FilePath = retVal.FilePath;
            Key = retVal.Key;
            Length = retVal.Length;
            RowVersion = retVal.RowVersion;
            TotalRecord = retVal.TotalRecord;
            isSuccess = retVal.isSuccess;
            FileByteStream = retVal.FileByteStream;
            return retVal.FileName;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        vnyi.ServiceClient.ServerTransfer.Status vnyi.ServiceClient.ServerTransfer.ITransferService.UploadFile(vnyi.ServiceClient.ServerTransfer.RemoteFileInfo request) {
            return base.Channel.UploadFile(request);
        }
        
        public bool UploadFile(string FileName, string FilePath, string Key, long Length, int RowVersion, int TotalRecord, bool isSuccess, System.IO.Stream FileByteStream, out string url) {
            vnyi.ServiceClient.ServerTransfer.RemoteFileInfo inValue = new vnyi.ServiceClient.ServerTransfer.RemoteFileInfo();
            inValue.FileName = FileName;
            inValue.FilePath = FilePath;
            inValue.Key = Key;
            inValue.Length = Length;
            inValue.RowVersion = RowVersion;
            inValue.TotalRecord = TotalRecord;
            inValue.isSuccess = isSuccess;
            inValue.FileByteStream = FileByteStream;
            vnyi.ServiceClient.ServerTransfer.Status retVal = ((vnyi.ServiceClient.ServerTransfer.ITransferService)(this)).UploadFile(inValue);
            url = retVal.url;
            return retVal.isSucess;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        vnyi.ServiceClient.ServerTransfer.Status vnyi.ServiceClient.ServerTransfer.ITransferService.GetDirectoryWithKey(vnyi.ServiceClient.ServerTransfer.KeyReques request) {
            return base.Channel.GetDirectoryWithKey(request);
        }
        
        public bool GetDirectoryWithKey(string Key, out string url) {
            vnyi.ServiceClient.ServerTransfer.KeyReques inValue = new vnyi.ServiceClient.ServerTransfer.KeyReques();
            inValue.Key = Key;
            vnyi.ServiceClient.ServerTransfer.Status retVal = ((vnyi.ServiceClient.ServerTransfer.ITransferService)(this)).GetDirectoryWithKey(inValue);
            url = retVal.url;
            return retVal.isSucess;
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        vnyi.ServiceClient.ServerTransfer.Status vnyi.ServiceClient.ServerTransfer.ITransferService.LogerMesseger(vnyi.ServiceClient.ServerTransfer.MessegerResquest request) {
            return base.Channel.LogerMesseger(request);
        }
        
        public bool LogerMesseger(string Content, string FileName, string FilePath, string Key, int RowVersionLog, vnyi.Meta.log.Status Status, string Title, int Type, out string url) {
            vnyi.ServiceClient.ServerTransfer.MessegerResquest inValue = new vnyi.ServiceClient.ServerTransfer.MessegerResquest();
            inValue.Content = Content;
            inValue.FileName = FileName;
            inValue.FilePath = FilePath;
            inValue.Key = Key;
            inValue.RowVersionLog = RowVersionLog;
            inValue.Status = Status;
            inValue.Title = Title;
            inValue.Type = Type;
            vnyi.ServiceClient.ServerTransfer.Status retVal = ((vnyi.ServiceClient.ServerTransfer.ITransferService)(this)).LogerMesseger(inValue);
            url = retVal.url;
            return retVal.isSucess;
        }
    }
}
