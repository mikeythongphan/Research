///////////////////////////////////////////////////////////////////////////
// Description: DataObject class for the 'DECLARATIONDETAIL'
// Generated by vnyi GenTool.
// Copyright (c) YI. All rights reserved.
///////////////////////////////////////////////////////////////////////////

using System;
using System.Data;
using vnyi.DataProvider;
using System.Data.SqlClient;
using System.Collections.Generic;
namespace vnyi.Library.COMON.IV
{
    public class DECLARATIONDETAILDAO
    {
        #region generated code

        /// <summary>
        /// Insert data full for table DECLARATIONDETAIL
        /// you must set attribute at application tier
        /// </summary>
        /// <param name="obj"> type of DECLARATIONDETAIL</param>
        public static bool Insert(DECLARATIONDETAIL declarationDetail, bool isTmp)
        {
            string procedure = isTmp ? "spDECLARATIONDETAILtmpInsert" : "spDECLARATIONDETAILInsert";
            int i = SqlHelper.ExecuteNonQuery(procedure,
                declarationDetail.COT_DOCUMENTID, 
                declarationDetail.PIT_AUTOID, 
                declarationDetail.ITG_AUTOID, 
                declarationDetail.UOM_AUTOID, 
                declarationDetail.TR_AUTOID, 
                declarationDetail.PK_AUTOID, 
                declarationDetail.CP_AUTOID, 
                declarationDetail.ITT_AUTOID, 
                declarationDetail.WH_AUTOID, 
                declarationDetail.PRJ_AUTOID, 
                declarationDetail.DEC_DOCUMENTID, 
                declarationDetail.PIT_ITEMNO, 
                declarationDetail.PIT_ITEMNAME, 
                declarationDetail.PIT_UNITPRICE, 
                declarationDetail.DECD_POIVQUANTITY, 
                declarationDetail.DECD_QUANTITY, 
                declarationDetail.DECD_AMOUNT, 
                declarationDetail.DECD_EITAXPERCENT, 
                declarationDetail.DECD_REDUCEPERCENT, 
                declarationDetail.DECD_TAXPERCENT, 
                declarationDetail.DECD_BASEAMOUNT, 
                declarationDetail.DECD_NOTE, 
                declarationDetail.DOC_DOCUMENTID);
            if (i > 0) return true; else return false;
        }

        /// <summary>
        /// Update data full for table DECLARATIONDETAIL
        /// you must set attribute at application tier
        /// </summary>
        /// <param name="obj"> type of DECLARATIONDETAIL</param>
        public static bool Update(DECLARATIONDETAIL declarationDetail, bool isTmp)
        {
            string procedure = isTmp ? "spDECLARATIONDETAILtmpUpdate" : "spDECLARATIONDETAILUpdate";
            int i = SqlHelper.ExecuteNonQuery(procedure,
                declarationDetail.DECD_AUTOID, 
                declarationDetail.COT_DOCUMENTID, 
                declarationDetail.PIT_AUTOID,
                declarationDetail.ITG_AUTOID, 
                declarationDetail.UOM_AUTOID, 
                declarationDetail.TR_AUTOID, 
                declarationDetail.PK_AUTOID, 
                declarationDetail.CP_AUTOID, 
                declarationDetail.ITT_AUTOID, 
                declarationDetail.WH_AUTOID, 
                declarationDetail.PRJ_AUTOID, 
                declarationDetail.DEC_DOCUMENTID, 
                declarationDetail.PIT_ITEMNO, 
                declarationDetail.PIT_ITEMNAME, 
                declarationDetail.PIT_UNITPRICE, 
                declarationDetail.DECD_POIVQUANTITY, 
                declarationDetail.DECD_QUANTITY, 
                declarationDetail.DECD_AMOUNT, 
                declarationDetail.DECD_EITAXPERCENT, 
                declarationDetail.DECD_REDUCEPERCENT, 
                declarationDetail.DECD_TAXPERCENT, 
                declarationDetail.DECD_BASEAMOUNT, 
                declarationDetail.DECD_NOTE, 
                declarationDetail.DOC_DOCUMENTID);
            if (i > 0) return true; return false;
        }

        /// <summary>
        /// Delete data full for table DECLARATIONDETAIL
        /// you must set attribute at application tier
        /// </summary>
        /// <param name="DECD_AUTOID"> type of DECD_AUTOID</param>
        public static bool Delete(long DECD_AUTOID)
        {
            int i = SqlHelper.ExecuteNonQuery("spDECLARATIONDETAILDelete", DECD_AUTOID);
            if (i > 0) return true; return false;
        }

        /// <summary>
        ///Select data full for table DECLARATIONDETAIL
        /// return oneDECLARATIONDETAIL
        /// you must set attribute at application tier
        /// </summary>
        /// <param name="DECD_AUTOID"> type of DECD_AUTOID</param>
        public static DECLARATIONDETAIL SelectByID(int DECD_AUTOID)
        {
            DataSet ds = new DataSet();
            DECLARATIONDETAIL result = new DECLARATIONDETAIL();
            SqlHelper.ExecuteDataset(ds, "spDECLARATIONDETAILGetByID", DECD_AUTOID);
            if (ds.Tables.Count > 0)
                if (ds.Tables[0].Rows.Count > 0)
                    result = new DECLARATIONDETAIL(ds.Tables[0].Rows[0]);
            ds.Dispose();
            return result;
        }

        /// <summary>
        /// Get all DECLARATIONDETAIL and Paging 
        /// you must set attribute at application tier
        /// </summary>
        /// <param name="page"> type of int is current page that want view </param>
        /// <param name="rowNum"> type of int is number rows in one page that want select  </param>
        /// <param name="total"> type of int is param output value. return is Total row that select</param>
        public static List<DECLARATIONDETAIL> GetAllPaging(int page, int rowNum, out int total)
        {
            total = 0;
            SqlParameter Page = new SqlParameter("@Page", page);
            SqlParameter RowNum = new SqlParameter("@RowNum", rowNum);
            SqlParameter Total = new SqlParameter("@Total", total) { Direction = ParameterDirection.Output };
            DataSet ds = new DataSet();
            List<DECLARATIONDETAIL> result = new List<DECLARATIONDETAIL>();
            SqlHelper.ExecuteDataset(ds,CommandType.StoredProcedure, "spDECLARATIONDETAILSelectAllPaging", Page, RowNum, Total);
            if (ds.Tables.Count > 0)
                if (ds.Tables[0].Rows.Count > 0)
                    foreach (DataRow dr in ds.Tables[0].Rows)
                        result.Add(new DECLARATIONDETAIL(dr));
            ds.Dispose();
            total = int.Parse(Total.Value.ToString());
            return result;
        }

        /// <summary>
        /// GetAll data for table DECLARATIONDETAIL
        /// Return Object is List<DECLARATIONDETAIL> obj
        /// </summary>
        public static List<DECLARATIONDETAIL> GetAllDECLARATIONDETAIL()
        {
            DataSet ds = new DataSet();
            List<DECLARATIONDETAIL> result = new List<DECLARATIONDETAIL>();
            SqlHelper.ExecuteDataset(ds, "spDECLARATIONDETAILSelectAll");
            if (ds.Tables.Count > 0)
                if (ds.Tables[0].Rows.Count > 0)
                    foreach (DataRow dr in ds.Tables[0].Rows)
                        result.Add(new DECLARATIONDETAIL(dr));
            ds.Dispose();
            return result;
        }
        #endregion

        #region extended code
        // Author       : lamnq
        // Created date : 9:48 AM 6/11/2009
        // Purpose      : get all invoice details by invoices range, use to initialize declaration details only.
        // Example      : get detailed information of INVOICE.IV_DOCUMENTID in 3, 5, 6 => IV_DOCUMENTIDs = "3, 5, 6"
        public static DataSet GetFromInvoices(string IV_DOCUMENTIDs)
        {
            DataSet dsInvoiceDetail = new DataSet();
            SqlHelper.ExecuteDataset( dsInvoiceDetail, "spDECLARATIONDETAILGetFROMInvoices", IV_DOCUMENTIDs);
            return dsInvoiceDetail;
        }

        // Author       : lamnq
        // Created date : 9:48 AM 6/11/2009
        // Purpose      : get all purchased order details by order range, use to initialize declaration details only.
        // Example      : get detailed information of PURORDER.PURO_DOCUMENTID in 3, 5, 6 => PURO_DOCUMENTIDs = "3, 5, 6"
        public static DataSet GetFromPurOrders(string PURO_DOCUMENTIDs)
        {
            DataSet dsOrderDetail = new DataSet();
            SqlHelper.ExecuteDataset( dsOrderDetail, "spDECLARATIONDETAILGetFromPurOrders", PURO_DOCUMENTIDs);
            return dsOrderDetail;
        }

        // Author       : lamnq
        // Created date : 9:48 AM 6/11/2009
        // Purpose      : get all declaration details by a specific declaration.
        // Note         : this method is another version of GetAllDECLARATIONDETAILByDeclarationID, written by sonnt, with more exact sql query.
        public static DataSet GetByDeclaration(long DEC_DOCUMENTID)
        {
            DataSet dsDeclarationDetail = new DataSet();
            SqlHelper.ExecuteDataset( dsDeclarationDetail, "spDECLARATIONDETAILGetByDeclaration", DEC_DOCUMENTID);
            return dsDeclarationDetail;
        }
        #endregion

        #region written by Nguyen Thanh Son
        public static DataTable GetAllDECLARATIONDETAILByDeclarationID(object id)
        {
            if (id is int)
            {
                DataSet ds = new DataSet();
                DataTable result = null;
                SqlHelper.ExecuteDataset(ds, "GetAllDECLARATIONDETAILByDeclarationID", id);
                if (ds != null)
                    if (ds.Tables.Count > 0)
                        return ds.Tables[0];

                return result;
            }
            else
                return null;
        }
        #endregion
    }
}
