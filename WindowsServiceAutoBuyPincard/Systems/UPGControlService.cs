//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.17626
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.17626.
// 
#pragma warning disable 1591

namespace ManagePincards.UPGControlService
{
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;


    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name = "UPGControlServiceSoap", Namespace = "http://osmp.ru/")]
    public partial class UPGControlService : System.Web.Services.Protocols.SoapHttpClientProtocol
    {

        private System.Threading.SendOrPostCallback ModifyPaymentOperationCompleted;

        private System.Threading.SendOrPostCallback GetLogsOperationCompleted;

        private System.Threading.SendOrPostCallback GetPinCardsOperationCompleted;

        private System.Threading.SendOrPostCallback GetAvailablePinCardsOperationCompleted;

        private System.Threading.SendOrPostCallback GetPaymentsOperationCompleted;

        private System.Threading.SendOrPostCallback GetErrorsOperationCompleted;

        private System.Threading.SendOrPostCallback GetUPGServicesOperationCompleted;

        private System.Threading.SendOrPostCallback UPGServiceStopperOperationCompleted;

        private System.Threading.SendOrPostCallback UPGServiceStarterOperationCompleted;

        private System.Threading.SendOrPostCallback GetErrorLogOperationCompleted;

        private System.Threading.SendOrPostCallback GetPinCardOperationCompleted;

        private System.Threading.SendOrPostCallback CreatePinCardTemplateOperationCompleted;

        private System.Threading.SendOrPostCallback CreatePinCardsOperationCompleted;

        private System.Threading.SendOrPostCallback ModifyPinCardOperationCompleted;

        private System.Threading.SendOrPostCallback GetPinCardTemplateOperationCompleted;

        private System.Threading.SendOrPostCallback ModifyPinCardTemplateOperationCompleted;

        private System.Threading.SendOrPostCallback CreatePinProductionOperationCompleted;

        private System.Threading.SendOrPostCallback CreatePinCardNominalOperationCompleted;

        private System.Threading.SendOrPostCallback GetUserPermissionsOperationCompleted;

        private System.Threading.SendOrPostCallback CreateOsmpCodeOperationCompleted;

        private System.Threading.SendOrPostCallback ModifyOsmpCodeOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteOsmpCodeOperationCompleted;

        private System.Threading.SendOrPostCallback CreateServiceFixedAmountOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteServiceFixedAmountOperationCompleted;

        private System.Threading.SendOrPostCallback CreateTimeZoneOperationCompleted;

        private System.Threading.SendOrPostCallback ModifyTimeZoneOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteTimeZoneOperationCompleted;

        private System.Threading.SendOrPostCallback CreateTimeZoneBindingOperationCompleted;

        private System.Threading.SendOrPostCallback ModifyTimeZoneBindingOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteTimeZoneBindingOperationCompleted;

        private System.Threading.SendOrPostCallback CreateGateServiceCounterOperationCompleted;

        private System.Threading.SendOrPostCallback ModifyGateServiceCounterOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteGateServiceCounterOperationCompleted;

        private System.Threading.SendOrPostCallback ModifyPinProductionOperationCompleted;

        private System.Threading.SendOrPostCallback ModifyPinCardNominalOperationCompleted;

        private System.Threading.SendOrPostCallback FindLogStringOperationCompleted;

        private System.Threading.SendOrPostCallback GetEventLogOperationCompleted;

        private System.Threading.SendOrPostCallback ClearAsyncCollectionOperationCompleted;

        private System.Threading.SendOrPostCallback CustomThreadsCountOperationCompleted;

        private System.Threading.SendOrPostCallback CustomThreadsFinishOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteItemFromAsyncCollectionOperationCompleted;

        private System.Threading.SendOrPostCallback ViewPaymentsToSendOperationCompleted;

        private System.Threading.SendOrPostCallback ViewFolderOperationCompleted;

        private System.Threading.SendOrPostCallback GetFileOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteFileOperationCompleted;

        private System.Threading.SendOrPostCallback RenameFileOperationCompleted;

        private System.Threading.SendOrPostCallback RenameFolderOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteFolderOperationCompleted;

        private System.Threading.SendOrPostCallback CreateFolderOperationCompleted;

        private System.Threading.SendOrPostCallback LoadFileOperationCompleted;

        private System.Threading.SendOrPostCallback ApplyGateDllOperationCompleted;

        private System.Threading.SendOrPostCallback ValidateGateDllOperationCompleted;

        private System.Threading.SendOrPostCallback GetRegisteredProtocolsOperationCompleted;

        private System.Threading.SendOrPostCallback GetPaysInPoolOperationCompleted;

        private System.Threading.SendOrPostCallback GetAsyncDataOperationCompleted;

        private System.Threading.SendOrPostCallback DisableAddonsOperationCompleted;

        private System.Threading.SendOrPostCallback EnableAddonsOperationCompleted;

        private System.Threading.SendOrPostCallback DomainMonitoringOperationCompleted;

        private System.Threading.SendOrPostCallback GetEventLogNamesOperationCompleted;

        private System.Threading.SendOrPostCallback GetLogTypesOperationCompleted;

        private System.Threading.SendOrPostCallback CreateGateCodeOperationCompleted;

        private System.Threading.SendOrPostCallback ModifyGateCodeOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteGateCodeOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteGateServiceOperationCompleted;

        private System.Threading.SendOrPostCallback CreateServiceOperationCompleted;

        private System.Threading.SendOrPostCallback ModifyServiceOperationCompleted;

        private System.Threading.SendOrPostCallback CreateOsmp_ServiceOperationCompleted;

        private System.Threading.SendOrPostCallback ModifyOsmp_ServiceOperationCompleted;

        private System.Threading.SendOrPostCallback GateServiceBindingOperationCompleted;

        private System.Threading.SendOrPostCallback CreateGateServiceOperationCompleted;

        private System.Threading.SendOrPostCallback CreatePermissionOperationCompleted;

        private System.Threading.SendOrPostCallback ModifyPermissionOperationCompleted;

        private System.Threading.SendOrPostCallback DeletePermissionOperationCompleted;

        private System.Threading.SendOrPostCallback CreateRoleOperationCompleted;

        private System.Threading.SendOrPostCallback ModifyRoleOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteRoleOperationCompleted;

        private System.Threading.SendOrPostCallback ModifyGateServiceOperationCompleted;

        private System.Threading.SendOrPostCallback CreateProtocolOperationCompleted;

        private System.Threading.SendOrPostCallback ModifyProtocolOperationCompleted;

        private System.Threading.SendOrPostCallback CreateGateOperationCompleted;

        private System.Threading.SendOrPostCallback ModifyGateOperationCompleted;

        private System.Threading.SendOrPostCallback CreateProviderOperationCompleted;

        private System.Threading.SendOrPostCallback ModifyProviderOperationCompleted;

        private System.Threading.SendOrPostCallback DBInfoOperationCompleted;

        private System.Threading.SendOrPostCallback User_AuthorizationOperationCompleted;

        private System.Threading.SendOrPostCallback Admin_GetUsersListOperationCompleted;

        private System.Threading.SendOrPostCallback Admin_GetRoleListOperationCompleted;

        private System.Threading.SendOrPostCallback Admin_CreateUserOperationCompleted;

        private System.Threading.SendOrPostCallback Admin_ModifyUserOperationCompleted;

        private System.Threading.SendOrPostCallback Info_UPG_GetStorageOperationCompleted;

        private System.Threading.SendOrPostCallback GetAllTablesOperationCompleted;

        private System.Threading.SendOrPostCallback GetAllowedTablesOperationCompleted;

        private System.Threading.SendOrPostCallback GetTableExOperationCompleted;

        private System.Threading.SendOrPostCallback GetPaymentsQueuesOperationCompleted;

        private System.Threading.SendOrPostCallback GetTableOperationCompleted;

        private bool useDefaultCredentialsSetExplicitly;

        /// <remarks/>
        public UPGControlService(string urlService)
        {
            this.Url = urlService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true))
            {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else
            {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        public new string Url
        {
            get
            {
                return base.Url;
            }
            set
            {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true)
                            && (this.useDefaultCredentialsSetExplicitly == false))
                            && (this.IsLocalFileSystemWebService(value) == false)))
                {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }

        public new bool UseDefaultCredentials
        {
            get
            {
                return base.UseDefaultCredentials;
            }
            set
            {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }

        /// <remarks/>
        public event ModifyPaymentCompletedEventHandler ModifyPaymentCompleted;

        /// <remarks/>
        public event GetLogsCompletedEventHandler GetLogsCompleted;

        /// <remarks/>
        public event GetPinCardsCompletedEventHandler GetPinCardsCompleted;

        /// <remarks/>
        public event GetAvailablePinCardsCompletedEventHandler GetAvailablePinCardsCompleted;

        /// <remarks/>
        public event GetPaymentsCompletedEventHandler GetPaymentsCompleted;

        /// <remarks/>
        public event GetErrorsCompletedEventHandler GetErrorsCompleted;

        /// <remarks/>
        public event GetUPGServicesCompletedEventHandler GetUPGServicesCompleted;

        /// <remarks/>
        public event UPGServiceStopperCompletedEventHandler UPGServiceStopperCompleted;

        /// <remarks/>
        public event UPGServiceStarterCompletedEventHandler UPGServiceStarterCompleted;

        /// <remarks/>
        public event GetErrorLogCompletedEventHandler GetErrorLogCompleted;

        /// <remarks/>
        public event GetPinCardCompletedEventHandler GetPinCardCompleted;

        /// <remarks/>
        public event CreatePinCardTemplateCompletedEventHandler CreatePinCardTemplateCompleted;

        /// <remarks/>
        public event CreatePinCardsCompletedEventHandler CreatePinCardsCompleted;

        /// <remarks/>
        public event ModifyPinCardCompletedEventHandler ModifyPinCardCompleted;

        /// <remarks/>
        public event GetPinCardTemplateCompletedEventHandler GetPinCardTemplateCompleted;

        /// <remarks/>
        public event ModifyPinCardTemplateCompletedEventHandler ModifyPinCardTemplateCompleted;

        /// <remarks/>
        public event CreatePinProductionCompletedEventHandler CreatePinProductionCompleted;

        /// <remarks/>
        public event CreatePinCardNominalCompletedEventHandler CreatePinCardNominalCompleted;

        /// <remarks/>
        public event GetUserPermissionsCompletedEventHandler GetUserPermissionsCompleted;

        /// <remarks/>
        public event CreateOsmpCodeCompletedEventHandler CreateOsmpCodeCompleted;

        /// <remarks/>
        public event ModifyOsmpCodeCompletedEventHandler ModifyOsmpCodeCompleted;

        /// <remarks/>
        public event DeleteOsmpCodeCompletedEventHandler DeleteOsmpCodeCompleted;

        /// <remarks/>
        public event CreateServiceFixedAmountCompletedEventHandler CreateServiceFixedAmountCompleted;

        /// <remarks/>
        public event DeleteServiceFixedAmountCompletedEventHandler DeleteServiceFixedAmountCompleted;

        /// <remarks/>
        public event CreateTimeZoneCompletedEventHandler CreateTimeZoneCompleted;

        /// <remarks/>
        public event ModifyTimeZoneCompletedEventHandler ModifyTimeZoneCompleted;

        /// <remarks/>
        public event DeleteTimeZoneCompletedEventHandler DeleteTimeZoneCompleted;

        /// <remarks/>
        public event CreateTimeZoneBindingCompletedEventHandler CreateTimeZoneBindingCompleted;

        /// <remarks/>
        public event ModifyTimeZoneBindingCompletedEventHandler ModifyTimeZoneBindingCompleted;

        /// <remarks/>
        public event DeleteTimeZoneBindingCompletedEventHandler DeleteTimeZoneBindingCompleted;

        /// <remarks/>
        public event CreateGateServiceCounterCompletedEventHandler CreateGateServiceCounterCompleted;

        /// <remarks/>
        public event ModifyGateServiceCounterCompletedEventHandler ModifyGateServiceCounterCompleted;

        /// <remarks/>
        public event DeleteGateServiceCounterCompletedEventHandler DeleteGateServiceCounterCompleted;

        /// <remarks/>
        public event ModifyPinProductionCompletedEventHandler ModifyPinProductionCompleted;

        /// <remarks/>
        public event ModifyPinCardNominalCompletedEventHandler ModifyPinCardNominalCompleted;

        /// <remarks/>
        public event FindLogStringCompletedEventHandler FindLogStringCompleted;

        /// <remarks/>
        public event GetEventLogCompletedEventHandler GetEventLogCompleted;

        /// <remarks/>
        public event ClearAsyncCollectionCompletedEventHandler ClearAsyncCollectionCompleted;

        /// <remarks/>
        public event CustomThreadsCountCompletedEventHandler CustomThreadsCountCompleted;

        /// <remarks/>
        public event CustomThreadsFinishCompletedEventHandler CustomThreadsFinishCompleted;

        /// <remarks/>
        public event DeleteItemFromAsyncCollectionCompletedEventHandler DeleteItemFromAsyncCollectionCompleted;

        /// <remarks/>
        public event ViewPaymentsToSendCompletedEventHandler ViewPaymentsToSendCompleted;

        /// <remarks/>
        public event ViewFolderCompletedEventHandler ViewFolderCompleted;

        /// <remarks/>
        public event GetFileCompletedEventHandler GetFileCompleted;

        /// <remarks/>
        public event DeleteFileCompletedEventHandler DeleteFileCompleted;

        /// <remarks/>
        public event RenameFileCompletedEventHandler RenameFileCompleted;

        /// <remarks/>
        public event RenameFolderCompletedEventHandler RenameFolderCompleted;

        /// <remarks/>
        public event DeleteFolderCompletedEventHandler DeleteFolderCompleted;

        /// <remarks/>
        public event CreateFolderCompletedEventHandler CreateFolderCompleted;

        /// <remarks/>
        public event LoadFileCompletedEventHandler LoadFileCompleted;

        /// <remarks/>
        public event ApplyGateDllCompletedEventHandler ApplyGateDllCompleted;

        /// <remarks/>
        public event ValidateGateDllCompletedEventHandler ValidateGateDllCompleted;

        /// <remarks/>
        public event GetRegisteredProtocolsCompletedEventHandler GetRegisteredProtocolsCompleted;

        /// <remarks/>
        public event GetPaysInPoolCompletedEventHandler GetPaysInPoolCompleted;

        /// <remarks/>
        public event GetAsyncDataCompletedEventHandler GetAsyncDataCompleted;

        /// <remarks/>
        public event DisableAddonsCompletedEventHandler DisableAddonsCompleted;

        /// <remarks/>
        public event EnableAddonsCompletedEventHandler EnableAddonsCompleted;

        /// <remarks/>
        public event DomainMonitoringCompletedEventHandler DomainMonitoringCompleted;

        /// <remarks/>
        public event GetEventLogNamesCompletedEventHandler GetEventLogNamesCompleted;

        /// <remarks/>
        public event GetLogTypesCompletedEventHandler GetLogTypesCompleted;

        /// <remarks/>
        public event CreateGateCodeCompletedEventHandler CreateGateCodeCompleted;

        /// <remarks/>
        public event ModifyGateCodeCompletedEventHandler ModifyGateCodeCompleted;

        /// <remarks/>
        public event DeleteGateCodeCompletedEventHandler DeleteGateCodeCompleted;

        /// <remarks/>
        public event DeleteGateServiceCompletedEventHandler DeleteGateServiceCompleted;

        /// <remarks/>
        public event CreateServiceCompletedEventHandler CreateServiceCompleted;

        /// <remarks/>
        public event ModifyServiceCompletedEventHandler ModifyServiceCompleted;

        /// <remarks/>
        public event CreateOsmp_ServiceCompletedEventHandler CreateOsmp_ServiceCompleted;

        /// <remarks/>
        public event ModifyOsmp_ServiceCompletedEventHandler ModifyOsmp_ServiceCompleted;

        /// <remarks/>
        public event GateServiceBindingCompletedEventHandler GateServiceBindingCompleted;

        /// <remarks/>
        public event CreateGateServiceCompletedEventHandler CreateGateServiceCompleted;

        /// <remarks/>
        public event CreatePermissionCompletedEventHandler CreatePermissionCompleted;

        /// <remarks/>
        public event ModifyPermissionCompletedEventHandler ModifyPermissionCompleted;

        /// <remarks/>
        public event DeletePermissionCompletedEventHandler DeletePermissionCompleted;

        /// <remarks/>
        public event CreateRoleCompletedEventHandler CreateRoleCompleted;

        /// <remarks/>
        public event ModifyRoleCompletedEventHandler ModifyRoleCompleted;

        /// <remarks/>
        public event DeleteRoleCompletedEventHandler DeleteRoleCompleted;

        /// <remarks/>
        public event ModifyGateServiceCompletedEventHandler ModifyGateServiceCompleted;

        /// <remarks/>
        public event CreateProtocolCompletedEventHandler CreateProtocolCompleted;

        /// <remarks/>
        public event ModifyProtocolCompletedEventHandler ModifyProtocolCompleted;

        /// <remarks/>
        public event CreateGateCompletedEventHandler CreateGateCompleted;

        /// <remarks/>
        public event ModifyGateCompletedEventHandler ModifyGateCompleted;

        /// <remarks/>
        public event CreateProviderCompletedEventHandler CreateProviderCompleted;

        /// <remarks/>
        public event ModifyProviderCompletedEventHandler ModifyProviderCompleted;

        /// <remarks/>
        public event DBInfoCompletedEventHandler DBInfoCompleted;

        /// <remarks/>
        public event User_AuthorizationCompletedEventHandler User_AuthorizationCompleted;

        /// <remarks/>
        public event Admin_GetUsersListCompletedEventHandler Admin_GetUsersListCompleted;

        /// <remarks/>
        public event Admin_GetRoleListCompletedEventHandler Admin_GetRoleListCompleted;

        /// <remarks/>
        public event Admin_CreateUserCompletedEventHandler Admin_CreateUserCompleted;

        /// <remarks/>
        public event Admin_ModifyUserCompletedEventHandler Admin_ModifyUserCompleted;

        /// <remarks/>
        public event Info_UPG_GetStorageCompletedEventHandler Info_UPG_GetStorageCompleted;

        /// <remarks/>
        public event GetAllTablesCompletedEventHandler GetAllTablesCompleted;

        /// <remarks/>
        public event GetAllowedTablesCompletedEventHandler GetAllowedTablesCompleted;

        /// <remarks/>
        public event GetTableExCompletedEventHandler GetTableExCompleted;

        /// <remarks/>
        public event GetPaymentsQueuesCompletedEventHandler GetPaymentsQueuesCompleted;

        /// <remarks/>
        public event GetTableCompletedEventHandler GetTableCompleted;

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/ModifyPayment", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage ModifyPayment(string Login, string Password, long PaymentID, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<short> Status, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> Code, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> GateStatus)
        {
            object[] results = this.Invoke("ModifyPayment", new object[] {
                        Login,
                        Password,
                        PaymentID,
                        Status,
                        Code,
                        GateStatus});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void ModifyPaymentAsync(string Login, string Password, long PaymentID, System.Nullable<short> Status, System.Nullable<int> Code, System.Nullable<int> GateStatus)
        {
            this.ModifyPaymentAsync(Login, Password, PaymentID, Status, Code, GateStatus, null);
        }

        /// <remarks/>
        public void ModifyPaymentAsync(string Login, string Password, long PaymentID, System.Nullable<short> Status, System.Nullable<int> Code, System.Nullable<int> GateStatus, object userState)
        {
            if ((this.ModifyPaymentOperationCompleted == null))
            {
                this.ModifyPaymentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyPaymentOperationCompleted);
            }
            this.InvokeAsync("ModifyPayment", new object[] {
                        Login,
                        Password,
                        PaymentID,
                        Status,
                        Code,
                        GateStatus}, this.ModifyPaymentOperationCompleted, userState);
        }

        private void OnModifyPaymentOperationCompleted(object arg)
        {
            if ((this.ModifyPaymentCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyPaymentCompleted(this, new ModifyPaymentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/GetLogs", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage GetLogs(string Login, string Password, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<long> CSLogID, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> CSUserID, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<short> CSRoleID, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<System.DateTime> DateFrom, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<System.DateTime> DateTo, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> Top)
        {
            object[] results = this.Invoke("GetLogs", new object[] {
                        Login,
                        Password,
                        CSLogID,
                        CSUserID,
                        CSRoleID,
                        DateFrom,
                        DateTo,
                        Top});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void GetLogsAsync(string Login, string Password, System.Nullable<long> CSLogID, System.Nullable<int> CSUserID, System.Nullable<short> CSRoleID, System.Nullable<System.DateTime> DateFrom, System.Nullable<System.DateTime> DateTo, System.Nullable<int> Top)
        {
            this.GetLogsAsync(Login, Password, CSLogID, CSUserID, CSRoleID, DateFrom, DateTo, Top, null);
        }

        /// <remarks/>
        public void GetLogsAsync(string Login, string Password, System.Nullable<long> CSLogID, System.Nullable<int> CSUserID, System.Nullable<short> CSRoleID, System.Nullable<System.DateTime> DateFrom, System.Nullable<System.DateTime> DateTo, System.Nullable<int> Top, object userState)
        {
            if ((this.GetLogsOperationCompleted == null))
            {
                this.GetLogsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLogsOperationCompleted);
            }
            this.InvokeAsync("GetLogs", new object[] {
                        Login,
                        Password,
                        CSLogID,
                        CSUserID,
                        CSRoleID,
                        DateFrom,
                        DateTo,
                        Top}, this.GetLogsOperationCompleted, userState);
        }

        private void OnGetLogsOperationCompleted(object arg)
        {
            if ((this.GetLogsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLogsCompleted(this, new GetLogsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/GetPinCards", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage GetPinCards(
                    string Login,
                    string Password,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> Top,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<long> CardID,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> CardProductionID,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<long> TransactionID,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> AgentID,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<short> CardStatus,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<System.DateTime> ExpireDateFrom,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<System.DateTime> ExpireDateTo,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<System.DateTime> CreateDateFrom,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<System.DateTime> CreateDateTo,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<System.DateTime> BlockDateFrom,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<System.DateTime> BlockDateTo,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<System.DateTime> SellDateFrom,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<System.DateTime> SellDateTo)
        {
            object[] results = this.Invoke("GetPinCards", new object[] {
                        Login,
                        Password,
                        Top,
                        CardID,
                        CardProductionID,
                        TransactionID,
                        AgentID,
                        CardStatus,
                        ExpireDateFrom,
                        ExpireDateTo,
                        CreateDateFrom,
                        CreateDateTo,
                        BlockDateFrom,
                        BlockDateTo,
                        SellDateFrom,
                        SellDateTo});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void GetPinCardsAsync(
                    string Login,
                    string Password,
                    System.Nullable<int> Top,
                    System.Nullable<long> CardID,
                    System.Nullable<int> CardProductionID,
                    System.Nullable<long> TransactionID,
                    System.Nullable<int> AgentID,
                    System.Nullable<short> CardStatus,
                    System.Nullable<System.DateTime> ExpireDateFrom,
                    System.Nullable<System.DateTime> ExpireDateTo,
                    System.Nullable<System.DateTime> CreateDateFrom,
                    System.Nullable<System.DateTime> CreateDateTo,
                    System.Nullable<System.DateTime> BlockDateFrom,
                    System.Nullable<System.DateTime> BlockDateTo,
                    System.Nullable<System.DateTime> SellDateFrom,
                    System.Nullable<System.DateTime> SellDateTo)
        {
            this.GetPinCardsAsync(Login, Password, Top, CardID, CardProductionID, TransactionID, AgentID, CardStatus, ExpireDateFrom, ExpireDateTo, CreateDateFrom, CreateDateTo, BlockDateFrom, BlockDateTo, SellDateFrom, SellDateTo, null);
        }

        /// <remarks/>
        public void GetPinCardsAsync(
                    string Login,
                    string Password,
                    System.Nullable<int> Top,
                    System.Nullable<long> CardID,
                    System.Nullable<int> CardProductionID,
                    System.Nullable<long> TransactionID,
                    System.Nullable<int> AgentID,
                    System.Nullable<short> CardStatus,
                    System.Nullable<System.DateTime> ExpireDateFrom,
                    System.Nullable<System.DateTime> ExpireDateTo,
                    System.Nullable<System.DateTime> CreateDateFrom,
                    System.Nullable<System.DateTime> CreateDateTo,
                    System.Nullable<System.DateTime> BlockDateFrom,
                    System.Nullable<System.DateTime> BlockDateTo,
                    System.Nullable<System.DateTime> SellDateFrom,
                    System.Nullable<System.DateTime> SellDateTo,
                    object userState)
        {
            if ((this.GetPinCardsOperationCompleted == null))
            {
                this.GetPinCardsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPinCardsOperationCompleted);
            }
            this.InvokeAsync("GetPinCards", new object[] {
                        Login,
                        Password,
                        Top,
                        CardID,
                        CardProductionID,
                        TransactionID,
                        AgentID,
                        CardStatus,
                        ExpireDateFrom,
                        ExpireDateTo,
                        CreateDateFrom,
                        CreateDateTo,
                        BlockDateFrom,
                        BlockDateTo,
                        SellDateFrom,
                        SellDateTo}, this.GetPinCardsOperationCompleted, userState);
        }

        private void OnGetPinCardsOperationCompleted(object arg)
        {
            if ((this.GetPinCardsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPinCardsCompleted(this, new GetPinCardsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/GetAvailablePinCards", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage GetAvailablePinCards(string Login, string Password)
        {
            object[] results = this.Invoke("GetAvailablePinCards", new object[] {
                        Login,
                        Password});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void GetAvailablePinCardsAsync(string Login, string Password)
        {
            this.GetAvailablePinCardsAsync(Login, Password, null);
        }

        /// <remarks/>
        public void GetAvailablePinCardsAsync(string Login, string Password, object userState)
        {
            if ((this.GetAvailablePinCardsOperationCompleted == null))
            {
                this.GetAvailablePinCardsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAvailablePinCardsOperationCompleted);
            }
            this.InvokeAsync("GetAvailablePinCards", new object[] {
                        Login,
                        Password}, this.GetAvailablePinCardsOperationCompleted, userState);
        }

        private void OnGetAvailablePinCardsOperationCompleted(object arg)
        {
            if ((this.GetAvailablePinCardsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAvailablePinCardsCompleted(this, new GetAvailablePinCardsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/GetPayments", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage GetPayments(string Login, string Password, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> ServiceID, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> GateServiceID, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<byte> Status, string Number, System.DateTime DateFrom, System.DateTime DateTo, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> Top)
        {
            object[] results = this.Invoke("GetPayments", new object[] {
                        Login,
                        Password,
                        ServiceID,
                        GateServiceID,
                        Status,
                        Number,
                        DateFrom,
                        DateTo,
                        Top});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void GetPaymentsAsync(string Login, string Password, System.Nullable<int> ServiceID, System.Nullable<int> GateServiceID, System.Nullable<byte> Status, string Number, System.DateTime DateFrom, System.DateTime DateTo, System.Nullable<int> Top)
        {
            this.GetPaymentsAsync(Login, Password, ServiceID, GateServiceID, Status, Number, DateFrom, DateTo, Top, null);
        }

        /// <remarks/>
        public void GetPaymentsAsync(string Login, string Password, System.Nullable<int> ServiceID, System.Nullable<int> GateServiceID, System.Nullable<byte> Status, string Number, System.DateTime DateFrom, System.DateTime DateTo, System.Nullable<int> Top, object userState)
        {
            if ((this.GetPaymentsOperationCompleted == null))
            {
                this.GetPaymentsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPaymentsOperationCompleted);
            }
            this.InvokeAsync("GetPayments", new object[] {
                        Login,
                        Password,
                        ServiceID,
                        GateServiceID,
                        Status,
                        Number,
                        DateFrom,
                        DateTo,
                        Top}, this.GetPaymentsOperationCompleted, userState);
        }

        private void OnGetPaymentsOperationCompleted(object arg)
        {
            if ((this.GetPaymentsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPaymentsCompleted(this, new GetPaymentsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/GetErrors", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage GetErrors(string Login, string Password)
        {
            object[] results = this.Invoke("GetErrors", new object[] {
                        Login,
                        Password});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void GetErrorsAsync(string Login, string Password)
        {
            this.GetErrorsAsync(Login, Password, null);
        }

        /// <remarks/>
        public void GetErrorsAsync(string Login, string Password, object userState)
        {
            if ((this.GetErrorsOperationCompleted == null))
            {
                this.GetErrorsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetErrorsOperationCompleted);
            }
            this.InvokeAsync("GetErrors", new object[] {
                        Login,
                        Password}, this.GetErrorsOperationCompleted, userState);
        }

        private void OnGetErrorsOperationCompleted(object arg)
        {
            if ((this.GetErrorsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetErrorsCompleted(this, new GetErrorsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/GetUPGServices", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage GetUPGServices(string Login, string Password)
        {
            object[] results = this.Invoke("GetUPGServices", new object[] {
                        Login,
                        Password});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void GetUPGServicesAsync(string Login, string Password)
        {
            this.GetUPGServicesAsync(Login, Password, null);
        }

        /// <remarks/>
        public void GetUPGServicesAsync(string Login, string Password, object userState)
        {
            if ((this.GetUPGServicesOperationCompleted == null))
            {
                this.GetUPGServicesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUPGServicesOperationCompleted);
            }
            this.InvokeAsync("GetUPGServices", new object[] {
                        Login,
                        Password}, this.GetUPGServicesOperationCompleted, userState);
        }

        private void OnGetUPGServicesOperationCompleted(object arg)
        {
            if ((this.GetUPGServicesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUPGServicesCompleted(this, new GetUPGServicesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/UPGServiceStopper", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage UPGServiceStopper(string Login, string Password, string serviceName)
        {
            object[] results = this.Invoke("UPGServiceStopper", new object[] {
                        Login,
                        Password,
                        serviceName});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void UPGServiceStopperAsync(string Login, string Password, string serviceName)
        {
            this.UPGServiceStopperAsync(Login, Password, serviceName, null);
        }

        /// <remarks/>
        public void UPGServiceStopperAsync(string Login, string Password, string serviceName, object userState)
        {
            if ((this.UPGServiceStopperOperationCompleted == null))
            {
                this.UPGServiceStopperOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUPGServiceStopperOperationCompleted);
            }
            this.InvokeAsync("UPGServiceStopper", new object[] {
                        Login,
                        Password,
                        serviceName}, this.UPGServiceStopperOperationCompleted, userState);
        }

        private void OnUPGServiceStopperOperationCompleted(object arg)
        {
            if ((this.UPGServiceStopperCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UPGServiceStopperCompleted(this, new UPGServiceStopperCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/UPGServiceStarter", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage UPGServiceStarter(string Login, string Password, string serviceName)
        {
            object[] results = this.Invoke("UPGServiceStarter", new object[] {
                        Login,
                        Password,
                        serviceName});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void UPGServiceStarterAsync(string Login, string Password, string serviceName)
        {
            this.UPGServiceStarterAsync(Login, Password, serviceName, null);
        }

        /// <remarks/>
        public void UPGServiceStarterAsync(string Login, string Password, string serviceName, object userState)
        {
            if ((this.UPGServiceStarterOperationCompleted == null))
            {
                this.UPGServiceStarterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUPGServiceStarterOperationCompleted);
            }
            this.InvokeAsync("UPGServiceStarter", new object[] {
                        Login,
                        Password,
                        serviceName}, this.UPGServiceStarterOperationCompleted, userState);
        }

        private void OnUPGServiceStarterOperationCompleted(object arg)
        {
            if ((this.UPGServiceStarterCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UPGServiceStarterCompleted(this, new UPGServiceStarterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/GetErrorLog", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage GetErrorLog(string Login, string Password, System.DateTime CatchDateFrom, System.DateTime CatchDateTo)
        {
            object[] results = this.Invoke("GetErrorLog", new object[] {
                        Login,
                        Password,
                        CatchDateFrom,
                        CatchDateTo});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void GetErrorLogAsync(string Login, string Password, System.DateTime CatchDateFrom, System.DateTime CatchDateTo)
        {
            this.GetErrorLogAsync(Login, Password, CatchDateFrom, CatchDateTo, null);
        }

        /// <remarks/>
        public void GetErrorLogAsync(string Login, string Password, System.DateTime CatchDateFrom, System.DateTime CatchDateTo, object userState)
        {
            if ((this.GetErrorLogOperationCompleted == null))
            {
                this.GetErrorLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetErrorLogOperationCompleted);
            }
            this.InvokeAsync("GetErrorLog", new object[] {
                        Login,
                        Password,
                        CatchDateFrom,
                        CatchDateTo}, this.GetErrorLogOperationCompleted, userState);
        }

        private void OnGetErrorLogOperationCompleted(object arg)
        {
            if ((this.GetErrorLogCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetErrorLogCompleted(this, new GetErrorLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/GetPinCard", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage GetPinCard(string Login, string Password, long CardID)
        {
            object[] results = this.Invoke("GetPinCard", new object[] {
                        Login,
                        Password,
                        CardID});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void GetPinCardAsync(string Login, string Password, long CardID)
        {
            this.GetPinCardAsync(Login, Password, CardID, null);
        }

        /// <remarks/>
        public void GetPinCardAsync(string Login, string Password, long CardID, object userState)
        {
            if ((this.GetPinCardOperationCompleted == null))
            {
                this.GetPinCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPinCardOperationCompleted);
            }
            this.InvokeAsync("GetPinCard", new object[] {
                        Login,
                        Password,
                        CardID}, this.GetPinCardOperationCompleted, userState);
        }

        private void OnGetPinCardOperationCompleted(object arg)
        {
            if ((this.GetPinCardCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPinCardCompleted(this, new GetPinCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/CreatePinCardTemplate", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage CreatePinCardTemplate(string Login, string Password, int ServiceID, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> CardNominalID, string TemplateXml)
        {
            object[] results = this.Invoke("CreatePinCardTemplate", new object[] {
                        Login,
                        Password,
                        ServiceID,
                        CardNominalID,
                        TemplateXml});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void CreatePinCardTemplateAsync(string Login, string Password, int ServiceID, System.Nullable<int> CardNominalID, string TemplateXml)
        {
            this.CreatePinCardTemplateAsync(Login, Password, ServiceID, CardNominalID, TemplateXml, null);
        }

        /// <remarks/>
        public void CreatePinCardTemplateAsync(string Login, string Password, int ServiceID, System.Nullable<int> CardNominalID, string TemplateXml, object userState)
        {
            if ((this.CreatePinCardTemplateOperationCompleted == null))
            {
                this.CreatePinCardTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreatePinCardTemplateOperationCompleted);
            }
            this.InvokeAsync("CreatePinCardTemplate", new object[] {
                        Login,
                        Password,
                        ServiceID,
                        CardNominalID,
                        TemplateXml}, this.CreatePinCardTemplateOperationCompleted, userState);
        }

        private void OnCreatePinCardTemplateOperationCompleted(object arg)
        {
            if ((this.CreatePinCardTemplateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreatePinCardTemplateCompleted(this, new CreatePinCardTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/CreatePinCards", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage CreatePinCards(string Login, string Password, string InputXml)
        {
            object[] results = this.Invoke("CreatePinCards", new object[] {
                        Login,
                        Password,
                        InputXml});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void CreatePinCardsAsync(string Login, string Password, string InputXml)
        {
            this.CreatePinCardsAsync(Login, Password, InputXml, null);
        }

        /// <remarks/>
        public void CreatePinCardsAsync(string Login, string Password, string InputXml, object userState)
        {
            if ((this.CreatePinCardsOperationCompleted == null))
            {
                this.CreatePinCardsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreatePinCardsOperationCompleted);
            }
            this.InvokeAsync("CreatePinCards", new object[] {
                        Login,
                        Password,
                        InputXml}, this.CreatePinCardsOperationCompleted, userState);
        }

        private void OnCreatePinCardsOperationCompleted(object arg)
        {
            if ((this.CreatePinCardsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreatePinCardsCompleted(this, new CreatePinCardsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/ModifyPinCard", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage ModifyPinCard(string Login, string Password, long CardId, int CardProductionId, string PinCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<decimal> TransactionId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> AgentId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<System.DateTime> ExpireDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<System.DateTime> CreateDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<System.DateTime> BlockDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<System.DateTime> SellDate, string CardInfo, byte CardStatus, string SerialNumber)
        {
            object[] results = this.Invoke("ModifyPinCard", new object[] {
                        Login,
                        Password,
                        CardId,
                        CardProductionId,
                        PinCode,
                        TransactionId,
                        AgentId,
                        ExpireDate,
                        CreateDate,
                        BlockDate,
                        SellDate,
                        CardInfo,
                        CardStatus,
                        SerialNumber});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void ModifyPinCardAsync(string Login, string Password, long CardId, int CardProductionId, string PinCode, System.Nullable<decimal> TransactionId, System.Nullable<int> AgentId, System.Nullable<System.DateTime> ExpireDate, System.Nullable<System.DateTime> CreateDate, System.Nullable<System.DateTime> BlockDate, System.Nullable<System.DateTime> SellDate, string CardInfo, byte CardStatus, string SerialNumber)
        {
            this.ModifyPinCardAsync(Login, Password, CardId, CardProductionId, PinCode, TransactionId, AgentId, ExpireDate, CreateDate, BlockDate, SellDate, CardInfo, CardStatus, SerialNumber, null);
        }

        /// <remarks/>
        public void ModifyPinCardAsync(string Login, string Password, long CardId, int CardProductionId, string PinCode, System.Nullable<decimal> TransactionId, System.Nullable<int> AgentId, System.Nullable<System.DateTime> ExpireDate, System.Nullable<System.DateTime> CreateDate, System.Nullable<System.DateTime> BlockDate, System.Nullable<System.DateTime> SellDate, string CardInfo, byte CardStatus, string SerialNumber, object userState)
        {
            if ((this.ModifyPinCardOperationCompleted == null))
            {
                this.ModifyPinCardOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyPinCardOperationCompleted);
            }
            this.InvokeAsync("ModifyPinCard", new object[] {
                        Login,
                        Password,
                        CardId,
                        CardProductionId,
                        PinCode,
                        TransactionId,
                        AgentId,
                        ExpireDate,
                        CreateDate,
                        BlockDate,
                        SellDate,
                        CardInfo,
                        CardStatus,
                        SerialNumber}, this.ModifyPinCardOperationCompleted, userState);
        }

        private void OnModifyPinCardOperationCompleted(object arg)
        {
            if ((this.ModifyPinCardCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyPinCardCompleted(this, new ModifyPinCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/GetPinCardTemplate", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage GetPinCardTemplate(string Login, string Password, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> PinCardTemplateId, int ServiceId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> CardNominalId)
        {
            object[] results = this.Invoke("GetPinCardTemplate", new object[] {
                        Login,
                        Password,
                        PinCardTemplateId,
                        ServiceId,
                        CardNominalId});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void GetPinCardTemplateAsync(string Login, string Password, System.Nullable<int> PinCardTemplateId, int ServiceId, System.Nullable<int> CardNominalId)
        {
            this.GetPinCardTemplateAsync(Login, Password, PinCardTemplateId, ServiceId, CardNominalId, null);
        }

        /// <remarks/>
        public void GetPinCardTemplateAsync(string Login, string Password, System.Nullable<int> PinCardTemplateId, int ServiceId, System.Nullable<int> CardNominalId, object userState)
        {
            if ((this.GetPinCardTemplateOperationCompleted == null))
            {
                this.GetPinCardTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPinCardTemplateOperationCompleted);
            }
            this.InvokeAsync("GetPinCardTemplate", new object[] {
                        Login,
                        Password,
                        PinCardTemplateId,
                        ServiceId,
                        CardNominalId}, this.GetPinCardTemplateOperationCompleted, userState);
        }

        private void OnGetPinCardTemplateOperationCompleted(object arg)
        {
            if ((this.GetPinCardTemplateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPinCardTemplateCompleted(this, new GetPinCardTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/ModifyPinCardTemplate", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage ModifyPinCardTemplate(string Login, string Password, int PinCardTemlateId, int ServiceId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> CardNominalId, string TemplateXml)
        {
            object[] results = this.Invoke("ModifyPinCardTemplate", new object[] {
                        Login,
                        Password,
                        PinCardTemlateId,
                        ServiceId,
                        CardNominalId,
                        TemplateXml});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void ModifyPinCardTemplateAsync(string Login, string Password, int PinCardTemlateId, int ServiceId, System.Nullable<int> CardNominalId, string TemplateXml)
        {
            this.ModifyPinCardTemplateAsync(Login, Password, PinCardTemlateId, ServiceId, CardNominalId, TemplateXml, null);
        }

        /// <remarks/>
        public void ModifyPinCardTemplateAsync(string Login, string Password, int PinCardTemlateId, int ServiceId, System.Nullable<int> CardNominalId, string TemplateXml, object userState)
        {
            if ((this.ModifyPinCardTemplateOperationCompleted == null))
            {
                this.ModifyPinCardTemplateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyPinCardTemplateOperationCompleted);
            }
            this.InvokeAsync("ModifyPinCardTemplate", new object[] {
                        Login,
                        Password,
                        PinCardTemlateId,
                        ServiceId,
                        CardNominalId,
                        TemplateXml}, this.ModifyPinCardTemplateOperationCompleted, userState);
        }

        private void OnModifyPinCardTemplateOperationCompleted(object arg)
        {
            if ((this.ModifyPinCardTemplateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyPinCardTemplateCompleted(this, new ModifyPinCardTemplateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/CreatePinProduction", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage CreatePinProduction(string Login, string Password, decimal Cost, int Priority, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<short> Flags, int CardNominalId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> Count, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<System.DateTime> ProductionDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<bool> Enabled)
        {
            object[] results = this.Invoke("CreatePinProduction", new object[] {
                        Login,
                        Password,
                        Cost,
                        Priority,
                        Flags,
                        CardNominalId,
                        Count,
                        ProductionDate,
                        Enabled});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void CreatePinProductionAsync(string Login, string Password, decimal Cost, int Priority, System.Nullable<short> Flags, int CardNominalId, System.Nullable<int> Count, System.Nullable<System.DateTime> ProductionDate, System.Nullable<bool> Enabled)
        {
            this.CreatePinProductionAsync(Login, Password, Cost, Priority, Flags, CardNominalId, Count, ProductionDate, Enabled, null);
        }

        /// <remarks/>
        public void CreatePinProductionAsync(string Login, string Password, decimal Cost, int Priority, System.Nullable<short> Flags, int CardNominalId, System.Nullable<int> Count, System.Nullable<System.DateTime> ProductionDate, System.Nullable<bool> Enabled, object userState)
        {
            if ((this.CreatePinProductionOperationCompleted == null))
            {
                this.CreatePinProductionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreatePinProductionOperationCompleted);
            }
            this.InvokeAsync("CreatePinProduction", new object[] {
                        Login,
                        Password,
                        Cost,
                        Priority,
                        Flags,
                        CardNominalId,
                        Count,
                        ProductionDate,
                        Enabled}, this.CreatePinProductionOperationCompleted, userState);
        }

        private void OnCreatePinProductionOperationCompleted(object arg)
        {
            if ((this.CreatePinProductionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreatePinProductionCompleted(this, new CreatePinProductionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/CreatePinCardNominal", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage CreatePinCardNominal(string Login, string Password, int ServiceId, string NominalName, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> CountLimit, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<decimal> Nominal, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<bool> Enabled, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> PictureId)
        {
            object[] results = this.Invoke("CreatePinCardNominal", new object[] {
                        Login,
                        Password,
                        ServiceId,
                        NominalName,
                        CountLimit,
                        Nominal,
                        Enabled,
                        PictureId});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void CreatePinCardNominalAsync(string Login, string Password, int ServiceId, string NominalName, System.Nullable<int> CountLimit, System.Nullable<decimal> Nominal, System.Nullable<bool> Enabled, System.Nullable<int> PictureId)
        {
            this.CreatePinCardNominalAsync(Login, Password, ServiceId, NominalName, CountLimit, Nominal, Enabled, PictureId, null);
        }

        /// <remarks/>
        public void CreatePinCardNominalAsync(string Login, string Password, int ServiceId, string NominalName, System.Nullable<int> CountLimit, System.Nullable<decimal> Nominal, System.Nullable<bool> Enabled, System.Nullable<int> PictureId, object userState)
        {
            if ((this.CreatePinCardNominalOperationCompleted == null))
            {
                this.CreatePinCardNominalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreatePinCardNominalOperationCompleted);
            }
            this.InvokeAsync("CreatePinCardNominal", new object[] {
                        Login,
                        Password,
                        ServiceId,
                        NominalName,
                        CountLimit,
                        Nominal,
                        Enabled,
                        PictureId}, this.CreatePinCardNominalOperationCompleted, userState);
        }

        private void OnCreatePinCardNominalOperationCompleted(object arg)
        {
            if ((this.CreatePinCardNominalCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreatePinCardNominalCompleted(this, new CreatePinCardNominalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/GetUserPermissions", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage GetUserPermissions(string Login, string Password)
        {
            object[] results = this.Invoke("GetUserPermissions", new object[] {
                        Login,
                        Password});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void GetUserPermissionsAsync(string Login, string Password)
        {
            this.GetUserPermissionsAsync(Login, Password, null);
        }

        /// <remarks/>
        public void GetUserPermissionsAsync(string Login, string Password, object userState)
        {
            if ((this.GetUserPermissionsOperationCompleted == null))
            {
                this.GetUserPermissionsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetUserPermissionsOperationCompleted);
            }
            this.InvokeAsync("GetUserPermissions", new object[] {
                        Login,
                        Password}, this.GetUserPermissionsOperationCompleted, userState);
        }

        private void OnGetUserPermissionsOperationCompleted(object arg)
        {
            if ((this.GetUserPermissionsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetUserPermissionsCompleted(this, new GetUserPermissionsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/CreateOsmpCode", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage CreateOsmpCode(string Login, string Password, int Code, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> OsmpCode, string Comment)
        {
            object[] results = this.Invoke("CreateOsmpCode", new object[] {
                        Login,
                        Password,
                        Code,
                        OsmpCode,
                        Comment});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void CreateOsmpCodeAsync(string Login, string Password, int Code, System.Nullable<int> OsmpCode, string Comment)
        {
            this.CreateOsmpCodeAsync(Login, Password, Code, OsmpCode, Comment, null);
        }

        /// <remarks/>
        public void CreateOsmpCodeAsync(string Login, string Password, int Code, System.Nullable<int> OsmpCode, string Comment, object userState)
        {
            if ((this.CreateOsmpCodeOperationCompleted == null))
            {
                this.CreateOsmpCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOsmpCodeOperationCompleted);
            }
            this.InvokeAsync("CreateOsmpCode", new object[] {
                        Login,
                        Password,
                        Code,
                        OsmpCode,
                        Comment}, this.CreateOsmpCodeOperationCompleted, userState);
        }

        private void OnCreateOsmpCodeOperationCompleted(object arg)
        {
            if ((this.CreateOsmpCodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateOsmpCodeCompleted(this, new CreateOsmpCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/ModifyOsmpCode", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage ModifyOsmpCode(string Login, string Password, int Code, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> OsmpCode, string Comment)
        {
            object[] results = this.Invoke("ModifyOsmpCode", new object[] {
                        Login,
                        Password,
                        Code,
                        OsmpCode,
                        Comment});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void ModifyOsmpCodeAsync(string Login, string Password, int Code, System.Nullable<int> OsmpCode, string Comment)
        {
            this.ModifyOsmpCodeAsync(Login, Password, Code, OsmpCode, Comment, null);
        }

        /// <remarks/>
        public void ModifyOsmpCodeAsync(string Login, string Password, int Code, System.Nullable<int> OsmpCode, string Comment, object userState)
        {
            if ((this.ModifyOsmpCodeOperationCompleted == null))
            {
                this.ModifyOsmpCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyOsmpCodeOperationCompleted);
            }
            this.InvokeAsync("ModifyOsmpCode", new object[] {
                        Login,
                        Password,
                        Code,
                        OsmpCode,
                        Comment}, this.ModifyOsmpCodeOperationCompleted, userState);
        }

        private void OnModifyOsmpCodeOperationCompleted(object arg)
        {
            if ((this.ModifyOsmpCodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyOsmpCodeCompleted(this, new ModifyOsmpCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/DeleteOsmpCode", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage DeleteOsmpCode(string Login, string Password, int Code)
        {
            object[] results = this.Invoke("DeleteOsmpCode", new object[] {
                        Login,
                        Password,
                        Code});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void DeleteOsmpCodeAsync(string Login, string Password, int Code)
        {
            this.DeleteOsmpCodeAsync(Login, Password, Code, null);
        }

        /// <remarks/>
        public void DeleteOsmpCodeAsync(string Login, string Password, int Code, object userState)
        {
            if ((this.DeleteOsmpCodeOperationCompleted == null))
            {
                this.DeleteOsmpCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteOsmpCodeOperationCompleted);
            }
            this.InvokeAsync("DeleteOsmpCode", new object[] {
                        Login,
                        Password,
                        Code}, this.DeleteOsmpCodeOperationCompleted, userState);
        }

        private void OnDeleteOsmpCodeOperationCompleted(object arg)
        {
            if ((this.DeleteOsmpCodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteOsmpCodeCompleted(this, new DeleteOsmpCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/CreateServiceFixedAmount", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage CreateServiceFixedAmount(string Login, string Password, int ServiceId, decimal Amount)
        {
            object[] results = this.Invoke("CreateServiceFixedAmount", new object[] {
                        Login,
                        Password,
                        ServiceId,
                        Amount});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void CreateServiceFixedAmountAsync(string Login, string Password, int ServiceId, decimal Amount)
        {
            this.CreateServiceFixedAmountAsync(Login, Password, ServiceId, Amount, null);
        }

        /// <remarks/>
        public void CreateServiceFixedAmountAsync(string Login, string Password, int ServiceId, decimal Amount, object userState)
        {
            if ((this.CreateServiceFixedAmountOperationCompleted == null))
            {
                this.CreateServiceFixedAmountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateServiceFixedAmountOperationCompleted);
            }
            this.InvokeAsync("CreateServiceFixedAmount", new object[] {
                        Login,
                        Password,
                        ServiceId,
                        Amount}, this.CreateServiceFixedAmountOperationCompleted, userState);
        }

        private void OnCreateServiceFixedAmountOperationCompleted(object arg)
        {
            if ((this.CreateServiceFixedAmountCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateServiceFixedAmountCompleted(this, new CreateServiceFixedAmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/DeleteServiceFixedAmount", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage DeleteServiceFixedAmount(string Login, string Password, int ServiceId, decimal Amount)
        {
            object[] results = this.Invoke("DeleteServiceFixedAmount", new object[] {
                        Login,
                        Password,
                        ServiceId,
                        Amount});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void DeleteServiceFixedAmountAsync(string Login, string Password, int ServiceId, decimal Amount)
        {
            this.DeleteServiceFixedAmountAsync(Login, Password, ServiceId, Amount, null);
        }

        /// <remarks/>
        public void DeleteServiceFixedAmountAsync(string Login, string Password, int ServiceId, decimal Amount, object userState)
        {
            if ((this.DeleteServiceFixedAmountOperationCompleted == null))
            {
                this.DeleteServiceFixedAmountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteServiceFixedAmountOperationCompleted);
            }
            this.InvokeAsync("DeleteServiceFixedAmount", new object[] {
                        Login,
                        Password,
                        ServiceId,
                        Amount}, this.DeleteServiceFixedAmountOperationCompleted, userState);
        }

        private void OnDeleteServiceFixedAmountOperationCompleted(object arg)
        {
            if ((this.DeleteServiceFixedAmountCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteServiceFixedAmountCompleted(this, new DeleteServiceFixedAmountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/CreateTimeZone", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage CreateTimeZone(string Login, string Password, short TimeZoneID, string TimeZoneName, string OsmpTimeZoneName, string Comment)
        {
            object[] results = this.Invoke("CreateTimeZone", new object[] {
                        Login,
                        Password,
                        TimeZoneID,
                        TimeZoneName,
                        OsmpTimeZoneName,
                        Comment});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void CreateTimeZoneAsync(string Login, string Password, short TimeZoneID, string TimeZoneName, string OsmpTimeZoneName, string Comment)
        {
            this.CreateTimeZoneAsync(Login, Password, TimeZoneID, TimeZoneName, OsmpTimeZoneName, Comment, null);
        }

        /// <remarks/>
        public void CreateTimeZoneAsync(string Login, string Password, short TimeZoneID, string TimeZoneName, string OsmpTimeZoneName, string Comment, object userState)
        {
            if ((this.CreateTimeZoneOperationCompleted == null))
            {
                this.CreateTimeZoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateTimeZoneOperationCompleted);
            }
            this.InvokeAsync("CreateTimeZone", new object[] {
                        Login,
                        Password,
                        TimeZoneID,
                        TimeZoneName,
                        OsmpTimeZoneName,
                        Comment}, this.CreateTimeZoneOperationCompleted, userState);
        }

        private void OnCreateTimeZoneOperationCompleted(object arg)
        {
            if ((this.CreateTimeZoneCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateTimeZoneCompleted(this, new CreateTimeZoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/ModifyTimeZone", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage ModifyTimeZone(string Login, string Password, short TimeZoneID, string TimeZoneName, string OsmpTimeZoneName, string Comment)
        {
            object[] results = this.Invoke("ModifyTimeZone", new object[] {
                        Login,
                        Password,
                        TimeZoneID,
                        TimeZoneName,
                        OsmpTimeZoneName,
                        Comment});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void ModifyTimeZoneAsync(string Login, string Password, short TimeZoneID, string TimeZoneName, string OsmpTimeZoneName, string Comment)
        {
            this.ModifyTimeZoneAsync(Login, Password, TimeZoneID, TimeZoneName, OsmpTimeZoneName, Comment, null);
        }

        /// <remarks/>
        public void ModifyTimeZoneAsync(string Login, string Password, short TimeZoneID, string TimeZoneName, string OsmpTimeZoneName, string Comment, object userState)
        {
            if ((this.ModifyTimeZoneOperationCompleted == null))
            {
                this.ModifyTimeZoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyTimeZoneOperationCompleted);
            }
            this.InvokeAsync("ModifyTimeZone", new object[] {
                        Login,
                        Password,
                        TimeZoneID,
                        TimeZoneName,
                        OsmpTimeZoneName,
                        Comment}, this.ModifyTimeZoneOperationCompleted, userState);
        }

        private void OnModifyTimeZoneOperationCompleted(object arg)
        {
            if ((this.ModifyTimeZoneCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyTimeZoneCompleted(this, new ModifyTimeZoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/DeleteTimeZone", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage DeleteTimeZone(string Login, string Password, short TimeZoneID)
        {
            object[] results = this.Invoke("DeleteTimeZone", new object[] {
                        Login,
                        Password,
                        TimeZoneID});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void DeleteTimeZoneAsync(string Login, string Password, short TimeZoneID)
        {
            this.DeleteTimeZoneAsync(Login, Password, TimeZoneID, null);
        }

        /// <remarks/>
        public void DeleteTimeZoneAsync(string Login, string Password, short TimeZoneID, object userState)
        {
            if ((this.DeleteTimeZoneOperationCompleted == null))
            {
                this.DeleteTimeZoneOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTimeZoneOperationCompleted);
            }
            this.InvokeAsync("DeleteTimeZone", new object[] {
                        Login,
                        Password,
                        TimeZoneID}, this.DeleteTimeZoneOperationCompleted, userState);
        }

        private void OnDeleteTimeZoneOperationCompleted(object arg)
        {
            if ((this.DeleteTimeZoneCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTimeZoneCompleted(this, new DeleteTimeZoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/CreateTimeZoneBinding", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage CreateTimeZoneBinding(string Login, string Password, short TimeZoneBindingID, short TimeZoneTypeID, string TimeZoneBindingName, short TimeZoneID, string Comment)
        {
            object[] results = this.Invoke("CreateTimeZoneBinding", new object[] {
                        Login,
                        Password,
                        TimeZoneBindingID,
                        TimeZoneTypeID,
                        TimeZoneBindingName,
                        TimeZoneID,
                        Comment});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void CreateTimeZoneBindingAsync(string Login, string Password, short TimeZoneBindingID, short TimeZoneTypeID, string TimeZoneBindingName, short TimeZoneID, string Comment)
        {
            this.CreateTimeZoneBindingAsync(Login, Password, TimeZoneBindingID, TimeZoneTypeID, TimeZoneBindingName, TimeZoneID, Comment, null);
        }

        /// <remarks/>
        public void CreateTimeZoneBindingAsync(string Login, string Password, short TimeZoneBindingID, short TimeZoneTypeID, string TimeZoneBindingName, short TimeZoneID, string Comment, object userState)
        {
            if ((this.CreateTimeZoneBindingOperationCompleted == null))
            {
                this.CreateTimeZoneBindingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateTimeZoneBindingOperationCompleted);
            }
            this.InvokeAsync("CreateTimeZoneBinding", new object[] {
                        Login,
                        Password,
                        TimeZoneBindingID,
                        TimeZoneTypeID,
                        TimeZoneBindingName,
                        TimeZoneID,
                        Comment}, this.CreateTimeZoneBindingOperationCompleted, userState);
        }

        private void OnCreateTimeZoneBindingOperationCompleted(object arg)
        {
            if ((this.CreateTimeZoneBindingCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateTimeZoneBindingCompleted(this, new CreateTimeZoneBindingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/ModifyTimeZoneBinding", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage ModifyTimeZoneBinding(string Login, string Password, short TimeZoneBindingID, short TimeZoneTypeID, string TimeZoneBindingName, short TimeZoneID, string Comment)
        {
            object[] results = this.Invoke("ModifyTimeZoneBinding", new object[] {
                        Login,
                        Password,
                        TimeZoneBindingID,
                        TimeZoneTypeID,
                        TimeZoneBindingName,
                        TimeZoneID,
                        Comment});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void ModifyTimeZoneBindingAsync(string Login, string Password, short TimeZoneBindingID, short TimeZoneTypeID, string TimeZoneBindingName, short TimeZoneID, string Comment)
        {
            this.ModifyTimeZoneBindingAsync(Login, Password, TimeZoneBindingID, TimeZoneTypeID, TimeZoneBindingName, TimeZoneID, Comment, null);
        }

        /// <remarks/>
        public void ModifyTimeZoneBindingAsync(string Login, string Password, short TimeZoneBindingID, short TimeZoneTypeID, string TimeZoneBindingName, short TimeZoneID, string Comment, object userState)
        {
            if ((this.ModifyTimeZoneBindingOperationCompleted == null))
            {
                this.ModifyTimeZoneBindingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyTimeZoneBindingOperationCompleted);
            }
            this.InvokeAsync("ModifyTimeZoneBinding", new object[] {
                        Login,
                        Password,
                        TimeZoneBindingID,
                        TimeZoneTypeID,
                        TimeZoneBindingName,
                        TimeZoneID,
                        Comment}, this.ModifyTimeZoneBindingOperationCompleted, userState);
        }

        private void OnModifyTimeZoneBindingOperationCompleted(object arg)
        {
            if ((this.ModifyTimeZoneBindingCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyTimeZoneBindingCompleted(this, new ModifyTimeZoneBindingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/DeleteTimeZoneBinding", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage DeleteTimeZoneBinding(string Login, string Password, short TimeZoneBindingID)
        {
            object[] results = this.Invoke("DeleteTimeZoneBinding", new object[] {
                        Login,
                        Password,
                        TimeZoneBindingID});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void DeleteTimeZoneBindingAsync(string Login, string Password, short TimeZoneBindingID)
        {
            this.DeleteTimeZoneBindingAsync(Login, Password, TimeZoneBindingID, null);
        }

        /// <remarks/>
        public void DeleteTimeZoneBindingAsync(string Login, string Password, short TimeZoneBindingID, object userState)
        {
            if ((this.DeleteTimeZoneBindingOperationCompleted == null))
            {
                this.DeleteTimeZoneBindingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteTimeZoneBindingOperationCompleted);
            }
            this.InvokeAsync("DeleteTimeZoneBinding", new object[] {
                        Login,
                        Password,
                        TimeZoneBindingID}, this.DeleteTimeZoneBindingOperationCompleted, userState);
        }

        private void OnDeleteTimeZoneBindingOperationCompleted(object arg)
        {
            if ((this.DeleteTimeZoneBindingCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteTimeZoneBindingCompleted(this, new DeleteTimeZoneBindingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/CreateGateServiceCounter", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage CreateGateServiceCounter(string Login, string Password, int GateServiceID, byte CounterType, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<long> Counter, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<System.DateTime> CounterDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<long> MaxValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<long> MinValue)
        {
            object[] results = this.Invoke("CreateGateServiceCounter", new object[] {
                        Login,
                        Password,
                        GateServiceID,
                        CounterType,
                        Counter,
                        CounterDate,
                        MaxValue,
                        MinValue});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void CreateGateServiceCounterAsync(string Login, string Password, int GateServiceID, byte CounterType, System.Nullable<long> Counter, System.Nullable<System.DateTime> CounterDate, System.Nullable<long> MaxValue, System.Nullable<long> MinValue)
        {
            this.CreateGateServiceCounterAsync(Login, Password, GateServiceID, CounterType, Counter, CounterDate, MaxValue, MinValue, null);
        }

        /// <remarks/>
        public void CreateGateServiceCounterAsync(string Login, string Password, int GateServiceID, byte CounterType, System.Nullable<long> Counter, System.Nullable<System.DateTime> CounterDate, System.Nullable<long> MaxValue, System.Nullable<long> MinValue, object userState)
        {
            if ((this.CreateGateServiceCounterOperationCompleted == null))
            {
                this.CreateGateServiceCounterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateGateServiceCounterOperationCompleted);
            }
            this.InvokeAsync("CreateGateServiceCounter", new object[] {
                        Login,
                        Password,
                        GateServiceID,
                        CounterType,
                        Counter,
                        CounterDate,
                        MaxValue,
                        MinValue}, this.CreateGateServiceCounterOperationCompleted, userState);
        }

        private void OnCreateGateServiceCounterOperationCompleted(object arg)
        {
            if ((this.CreateGateServiceCounterCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateGateServiceCounterCompleted(this, new CreateGateServiceCounterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/ModifyGateServiceCounter", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage ModifyGateServiceCounter(string Login, string Password, int GateServiceID, byte CounterType, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<long> Counter, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<System.DateTime> CounterDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<long> MaxValue, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<long> MinValue)
        {
            object[] results = this.Invoke("ModifyGateServiceCounter", new object[] {
                        Login,
                        Password,
                        GateServiceID,
                        CounterType,
                        Counter,
                        CounterDate,
                        MaxValue,
                        MinValue});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void ModifyGateServiceCounterAsync(string Login, string Password, int GateServiceID, byte CounterType, System.Nullable<long> Counter, System.Nullable<System.DateTime> CounterDate, System.Nullable<long> MaxValue, System.Nullable<long> MinValue)
        {
            this.ModifyGateServiceCounterAsync(Login, Password, GateServiceID, CounterType, Counter, CounterDate, MaxValue, MinValue, null);
        }

        /// <remarks/>
        public void ModifyGateServiceCounterAsync(string Login, string Password, int GateServiceID, byte CounterType, System.Nullable<long> Counter, System.Nullable<System.DateTime> CounterDate, System.Nullable<long> MaxValue, System.Nullable<long> MinValue, object userState)
        {
            if ((this.ModifyGateServiceCounterOperationCompleted == null))
            {
                this.ModifyGateServiceCounterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyGateServiceCounterOperationCompleted);
            }
            this.InvokeAsync("ModifyGateServiceCounter", new object[] {
                        Login,
                        Password,
                        GateServiceID,
                        CounterType,
                        Counter,
                        CounterDate,
                        MaxValue,
                        MinValue}, this.ModifyGateServiceCounterOperationCompleted, userState);
        }

        private void OnModifyGateServiceCounterOperationCompleted(object arg)
        {
            if ((this.ModifyGateServiceCounterCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyGateServiceCounterCompleted(this, new ModifyGateServiceCounterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/DeleteGateServiceCounter", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage DeleteGateServiceCounter(string Login, string Password, int GateServiceID, byte CounterType)
        {
            object[] results = this.Invoke("DeleteGateServiceCounter", new object[] {
                        Login,
                        Password,
                        GateServiceID,
                        CounterType});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void DeleteGateServiceCounterAsync(string Login, string Password, int GateServiceID, byte CounterType)
        {
            this.DeleteGateServiceCounterAsync(Login, Password, GateServiceID, CounterType, null);
        }

        /// <remarks/>
        public void DeleteGateServiceCounterAsync(string Login, string Password, int GateServiceID, byte CounterType, object userState)
        {
            if ((this.DeleteGateServiceCounterOperationCompleted == null))
            {
                this.DeleteGateServiceCounterOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteGateServiceCounterOperationCompleted);
            }
            this.InvokeAsync("DeleteGateServiceCounter", new object[] {
                        Login,
                        Password,
                        GateServiceID,
                        CounterType}, this.DeleteGateServiceCounterOperationCompleted, userState);
        }

        private void OnDeleteGateServiceCounterOperationCompleted(object arg)
        {
            if ((this.DeleteGateServiceCounterCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteGateServiceCounterCompleted(this, new DeleteGateServiceCounterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/ModifyPinProduction", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage ModifyPinProduction(string Login, string Password, int CardProductionId, decimal Cost, int Priority, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<short> Flags, int CardNominalId, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> Count, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<System.DateTime> ProductionDate, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<bool> Enabled)
        {
            object[] results = this.Invoke("ModifyPinProduction", new object[] {
                        Login,
                        Password,
                        CardProductionId,
                        Cost,
                        Priority,
                        Flags,
                        CardNominalId,
                        Count,
                        ProductionDate,
                        Enabled});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void ModifyPinProductionAsync(string Login, string Password, int CardProductionId, decimal Cost, int Priority, System.Nullable<short> Flags, int CardNominalId, System.Nullable<int> Count, System.Nullable<System.DateTime> ProductionDate, System.Nullable<bool> Enabled)
        {
            this.ModifyPinProductionAsync(Login, Password, CardProductionId, Cost, Priority, Flags, CardNominalId, Count, ProductionDate, Enabled, null);
        }

        /// <remarks/>
        public void ModifyPinProductionAsync(string Login, string Password, int CardProductionId, decimal Cost, int Priority, System.Nullable<short> Flags, int CardNominalId, System.Nullable<int> Count, System.Nullable<System.DateTime> ProductionDate, System.Nullable<bool> Enabled, object userState)
        {
            if ((this.ModifyPinProductionOperationCompleted == null))
            {
                this.ModifyPinProductionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyPinProductionOperationCompleted);
            }
            this.InvokeAsync("ModifyPinProduction", new object[] {
                        Login,
                        Password,
                        CardProductionId,
                        Cost,
                        Priority,
                        Flags,
                        CardNominalId,
                        Count,
                        ProductionDate,
                        Enabled}, this.ModifyPinProductionOperationCompleted, userState);
        }

        private void OnModifyPinProductionOperationCompleted(object arg)
        {
            if ((this.ModifyPinProductionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyPinProductionCompleted(this, new ModifyPinProductionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/ModifyPinCardNominal", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage ModifyPinCardNominal(string Login, string Password, int CardNominalId, int ServiceId, string NominalName, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> CountLimit, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<decimal> Nominal, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<bool> Enabled, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> PictureId)
        {
            object[] results = this.Invoke("ModifyPinCardNominal", new object[] {
                        Login,
                        Password,
                        CardNominalId,
                        ServiceId,
                        NominalName,
                        CountLimit,
                        Nominal,
                        Enabled,
                        PictureId});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void ModifyPinCardNominalAsync(string Login, string Password, int CardNominalId, int ServiceId, string NominalName, System.Nullable<int> CountLimit, System.Nullable<decimal> Nominal, System.Nullable<bool> Enabled, System.Nullable<int> PictureId)
        {
            this.ModifyPinCardNominalAsync(Login, Password, CardNominalId, ServiceId, NominalName, CountLimit, Nominal, Enabled, PictureId, null);
        }

        /// <remarks/>
        public void ModifyPinCardNominalAsync(string Login, string Password, int CardNominalId, int ServiceId, string NominalName, System.Nullable<int> CountLimit, System.Nullable<decimal> Nominal, System.Nullable<bool> Enabled, System.Nullable<int> PictureId, object userState)
        {
            if ((this.ModifyPinCardNominalOperationCompleted == null))
            {
                this.ModifyPinCardNominalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyPinCardNominalOperationCompleted);
            }
            this.InvokeAsync("ModifyPinCardNominal", new object[] {
                        Login,
                        Password,
                        CardNominalId,
                        ServiceId,
                        NominalName,
                        CountLimit,
                        Nominal,
                        Enabled,
                        PictureId}, this.ModifyPinCardNominalOperationCompleted, userState);
        }

        private void OnModifyPinCardNominalOperationCompleted(object arg)
        {
            if ((this.ModifyPinCardNominalCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyPinCardNominalCompleted(this, new ModifyPinCardNominalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/FindLogString", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage FindLogString(string Login, string Password, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> ProtocolID, string Date, string Hour, string Minute, string Pattern, string CharSet, int SpreadLines, bool CaseSensitive, int FileType, int MaxLines)
        {
            object[] results = this.Invoke("FindLogString", new object[] {
                        Login,
                        Password,
                        ProtocolID,
                        Date,
                        Hour,
                        Minute,
                        Pattern,
                        CharSet,
                        SpreadLines,
                        CaseSensitive,
                        FileType,
                        MaxLines});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void FindLogStringAsync(string Login, string Password, System.Nullable<int> ProtocolID, string Date, string Hour, string Minute, string Pattern, string CharSet, int SpreadLines, bool CaseSensitive, int FileType, int MaxLines)
        {
            this.FindLogStringAsync(Login, Password, ProtocolID, Date, Hour, Minute, Pattern, CharSet, SpreadLines, CaseSensitive, FileType, MaxLines, null);
        }

        /// <remarks/>
        public void FindLogStringAsync(string Login, string Password, System.Nullable<int> ProtocolID, string Date, string Hour, string Minute, string Pattern, string CharSet, int SpreadLines, bool CaseSensitive, int FileType, int MaxLines, object userState)
        {
            if ((this.FindLogStringOperationCompleted == null))
            {
                this.FindLogStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFindLogStringOperationCompleted);
            }
            this.InvokeAsync("FindLogString", new object[] {
                        Login,
                        Password,
                        ProtocolID,
                        Date,
                        Hour,
                        Minute,
                        Pattern,
                        CharSet,
                        SpreadLines,
                        CaseSensitive,
                        FileType,
                        MaxLines}, this.FindLogStringOperationCompleted, userState);
        }

        private void OnFindLogStringOperationCompleted(object arg)
        {
            if ((this.FindLogStringCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FindLogStringCompleted(this, new FindLogStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/GetEventLog", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage GetEventLog(string Login, string Password, string EventLogName, System.DateTime FromDate, System.DateTime ToDate, int MaxLines)
        {
            object[] results = this.Invoke("GetEventLog", new object[] {
                        Login,
                        Password,
                        EventLogName,
                        FromDate,
                        ToDate,
                        MaxLines});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void GetEventLogAsync(string Login, string Password, string EventLogName, System.DateTime FromDate, System.DateTime ToDate, int MaxLines)
        {
            this.GetEventLogAsync(Login, Password, EventLogName, FromDate, ToDate, MaxLines, null);
        }

        /// <remarks/>
        public void GetEventLogAsync(string Login, string Password, string EventLogName, System.DateTime FromDate, System.DateTime ToDate, int MaxLines, object userState)
        {
            if ((this.GetEventLogOperationCompleted == null))
            {
                this.GetEventLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEventLogOperationCompleted);
            }
            this.InvokeAsync("GetEventLog", new object[] {
                        Login,
                        Password,
                        EventLogName,
                        FromDate,
                        ToDate,
                        MaxLines}, this.GetEventLogOperationCompleted, userState);
        }

        private void OnGetEventLogOperationCompleted(object arg)
        {
            if ((this.GetEventLogCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEventLogCompleted(this, new GetEventLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/ClearAsyncCollection", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage ClearAsyncCollection(string Login, string Password, int protocolId)
        {
            object[] results = this.Invoke("ClearAsyncCollection", new object[] {
                        Login,
                        Password,
                        protocolId});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void ClearAsyncCollectionAsync(string Login, string Password, int protocolId)
        {
            this.ClearAsyncCollectionAsync(Login, Password, protocolId, null);
        }

        /// <remarks/>
        public void ClearAsyncCollectionAsync(string Login, string Password, int protocolId, object userState)
        {
            if ((this.ClearAsyncCollectionOperationCompleted == null))
            {
                this.ClearAsyncCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnClearAsyncCollectionOperationCompleted);
            }
            this.InvokeAsync("ClearAsyncCollection", new object[] {
                        Login,
                        Password,
                        protocolId}, this.ClearAsyncCollectionOperationCompleted, userState);
        }

        private void OnClearAsyncCollectionOperationCompleted(object arg)
        {
            if ((this.ClearAsyncCollectionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ClearAsyncCollectionCompleted(this, new ClearAsyncCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/CustomThreadsCount", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage CustomThreadsCount(string Login, string Password, int protocolId)
        {
            object[] results = this.Invoke("CustomThreadsCount", new object[] {
                        Login,
                        Password,
                        protocolId});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void CustomThreadsCountAsync(string Login, string Password, int protocolId)
        {
            this.CustomThreadsCountAsync(Login, Password, protocolId, null);
        }

        /// <remarks/>
        public void CustomThreadsCountAsync(string Login, string Password, int protocolId, object userState)
        {
            if ((this.CustomThreadsCountOperationCompleted == null))
            {
                this.CustomThreadsCountOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomThreadsCountOperationCompleted);
            }
            this.InvokeAsync("CustomThreadsCount", new object[] {
                        Login,
                        Password,
                        protocolId}, this.CustomThreadsCountOperationCompleted, userState);
        }

        private void OnCustomThreadsCountOperationCompleted(object arg)
        {
            if ((this.CustomThreadsCountCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomThreadsCountCompleted(this, new CustomThreadsCountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/CustomThreadsFinish", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage CustomThreadsFinish(string Login, string Password, int protocolId)
        {
            object[] results = this.Invoke("CustomThreadsFinish", new object[] {
                        Login,
                        Password,
                        protocolId});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void CustomThreadsFinishAsync(string Login, string Password, int protocolId)
        {
            this.CustomThreadsFinishAsync(Login, Password, protocolId, null);
        }

        /// <remarks/>
        public void CustomThreadsFinishAsync(string Login, string Password, int protocolId, object userState)
        {
            if ((this.CustomThreadsFinishOperationCompleted == null))
            {
                this.CustomThreadsFinishOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCustomThreadsFinishOperationCompleted);
            }
            this.InvokeAsync("CustomThreadsFinish", new object[] {
                        Login,
                        Password,
                        protocolId}, this.CustomThreadsFinishOperationCompleted, userState);
        }

        private void OnCustomThreadsFinishOperationCompleted(object arg)
        {
            if ((this.CustomThreadsFinishCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CustomThreadsFinishCompleted(this, new CustomThreadsFinishCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/DeleteItemFromAsyncCollection", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage DeleteItemFromAsyncCollection(string Login, string Password, int protocolId, int operation, int pssId, decimal txnId)
        {
            object[] results = this.Invoke("DeleteItemFromAsyncCollection", new object[] {
                        Login,
                        Password,
                        protocolId,
                        operation,
                        pssId,
                        txnId});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void DeleteItemFromAsyncCollectionAsync(string Login, string Password, int protocolId, int operation, int pssId, decimal txnId)
        {
            this.DeleteItemFromAsyncCollectionAsync(Login, Password, protocolId, operation, pssId, txnId, null);
        }

        /// <remarks/>
        public void DeleteItemFromAsyncCollectionAsync(string Login, string Password, int protocolId, int operation, int pssId, decimal txnId, object userState)
        {
            if ((this.DeleteItemFromAsyncCollectionOperationCompleted == null))
            {
                this.DeleteItemFromAsyncCollectionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteItemFromAsyncCollectionOperationCompleted);
            }
            this.InvokeAsync("DeleteItemFromAsyncCollection", new object[] {
                        Login,
                        Password,
                        protocolId,
                        operation,
                        pssId,
                        txnId}, this.DeleteItemFromAsyncCollectionOperationCompleted, userState);
        }

        private void OnDeleteItemFromAsyncCollectionOperationCompleted(object arg)
        {
            if ((this.DeleteItemFromAsyncCollectionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteItemFromAsyncCollectionCompleted(this, new DeleteItemFromAsyncCollectionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/ViewPaymentsToSend", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage ViewPaymentsToSend(string Login, string Password, int protocolID)
        {
            object[] results = this.Invoke("ViewPaymentsToSend", new object[] {
                        Login,
                        Password,
                        protocolID});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void ViewPaymentsToSendAsync(string Login, string Password, int protocolID)
        {
            this.ViewPaymentsToSendAsync(Login, Password, protocolID, null);
        }

        /// <remarks/>
        public void ViewPaymentsToSendAsync(string Login, string Password, int protocolID, object userState)
        {
            if ((this.ViewPaymentsToSendOperationCompleted == null))
            {
                this.ViewPaymentsToSendOperationCompleted = new System.Threading.SendOrPostCallback(this.OnViewPaymentsToSendOperationCompleted);
            }
            this.InvokeAsync("ViewPaymentsToSend", new object[] {
                        Login,
                        Password,
                        protocolID}, this.ViewPaymentsToSendOperationCompleted, userState);
        }

        private void OnViewPaymentsToSendOperationCompleted(object arg)
        {
            if ((this.ViewPaymentsToSendCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ViewPaymentsToSendCompleted(this, new ViewPaymentsToSendCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/ViewFolder", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage ViewFolder(string Login, string Password, string relDirName)
        {
            object[] results = this.Invoke("ViewFolder", new object[] {
                        Login,
                        Password,
                        relDirName});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void ViewFolderAsync(string Login, string Password, string relDirName)
        {
            this.ViewFolderAsync(Login, Password, relDirName, null);
        }

        /// <remarks/>
        public void ViewFolderAsync(string Login, string Password, string relDirName, object userState)
        {
            if ((this.ViewFolderOperationCompleted == null))
            {
                this.ViewFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnViewFolderOperationCompleted);
            }
            this.InvokeAsync("ViewFolder", new object[] {
                        Login,
                        Password,
                        relDirName}, this.ViewFolderOperationCompleted, userState);
        }

        private void OnViewFolderOperationCompleted(object arg)
        {
            if ((this.ViewFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ViewFolderCompleted(this, new ViewFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/GetFile", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage GetFile(string Login, string Password, string relPathFileName)
        {
            object[] results = this.Invoke("GetFile", new object[] {
                        Login,
                        Password,
                        relPathFileName});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void GetFileAsync(string Login, string Password, string relPathFileName)
        {
            this.GetFileAsync(Login, Password, relPathFileName, null);
        }

        /// <remarks/>
        public void GetFileAsync(string Login, string Password, string relPathFileName, object userState)
        {
            if ((this.GetFileOperationCompleted == null))
            {
                this.GetFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileOperationCompleted);
            }
            this.InvokeAsync("GetFile", new object[] {
                        Login,
                        Password,
                        relPathFileName}, this.GetFileOperationCompleted, userState);
        }

        private void OnGetFileOperationCompleted(object arg)
        {
            if ((this.GetFileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileCompleted(this, new GetFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/DeleteFile", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage DeleteFile(string Login, string Password, string relPathFileName)
        {
            object[] results = this.Invoke("DeleteFile", new object[] {
                        Login,
                        Password,
                        relPathFileName});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void DeleteFileAsync(string Login, string Password, string relPathFileName)
        {
            this.DeleteFileAsync(Login, Password, relPathFileName, null);
        }

        /// <remarks/>
        public void DeleteFileAsync(string Login, string Password, string relPathFileName, object userState)
        {
            if ((this.DeleteFileOperationCompleted == null))
            {
                this.DeleteFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFileOperationCompleted);
            }
            this.InvokeAsync("DeleteFile", new object[] {
                        Login,
                        Password,
                        relPathFileName}, this.DeleteFileOperationCompleted, userState);
        }

        private void OnDeleteFileOperationCompleted(object arg)
        {
            if ((this.DeleteFileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFileCompleted(this, new DeleteFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/RenameFile", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage RenameFile(string Login, string Password, string oldFile, string newFile)
        {
            object[] results = this.Invoke("RenameFile", new object[] {
                        Login,
                        Password,
                        oldFile,
                        newFile});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void RenameFileAsync(string Login, string Password, string oldFile, string newFile)
        {
            this.RenameFileAsync(Login, Password, oldFile, newFile, null);
        }

        /// <remarks/>
        public void RenameFileAsync(string Login, string Password, string oldFile, string newFile, object userState)
        {
            if ((this.RenameFileOperationCompleted == null))
            {
                this.RenameFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameFileOperationCompleted);
            }
            this.InvokeAsync("RenameFile", new object[] {
                        Login,
                        Password,
                        oldFile,
                        newFile}, this.RenameFileOperationCompleted, userState);
        }

        private void OnRenameFileOperationCompleted(object arg)
        {
            if ((this.RenameFileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenameFileCompleted(this, new RenameFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/RenameFolder", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage RenameFolder(string Login, string Password, string oldDir, string newDir)
        {
            object[] results = this.Invoke("RenameFolder", new object[] {
                        Login,
                        Password,
                        oldDir,
                        newDir});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void RenameFolderAsync(string Login, string Password, string oldDir, string newDir)
        {
            this.RenameFolderAsync(Login, Password, oldDir, newDir, null);
        }

        /// <remarks/>
        public void RenameFolderAsync(string Login, string Password, string oldDir, string newDir, object userState)
        {
            if ((this.RenameFolderOperationCompleted == null))
            {
                this.RenameFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRenameFolderOperationCompleted);
            }
            this.InvokeAsync("RenameFolder", new object[] {
                        Login,
                        Password,
                        oldDir,
                        newDir}, this.RenameFolderOperationCompleted, userState);
        }

        private void OnRenameFolderOperationCompleted(object arg)
        {
            if ((this.RenameFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RenameFolderCompleted(this, new RenameFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/DeleteFolder", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage DeleteFolder(string Login, string Password, string dirPath)
        {
            object[] results = this.Invoke("DeleteFolder", new object[] {
                        Login,
                        Password,
                        dirPath});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void DeleteFolderAsync(string Login, string Password, string dirPath)
        {
            this.DeleteFolderAsync(Login, Password, dirPath, null);
        }

        /// <remarks/>
        public void DeleteFolderAsync(string Login, string Password, string dirPath, object userState)
        {
            if ((this.DeleteFolderOperationCompleted == null))
            {
                this.DeleteFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFolderOperationCompleted);
            }
            this.InvokeAsync("DeleteFolder", new object[] {
                        Login,
                        Password,
                        dirPath}, this.DeleteFolderOperationCompleted, userState);
        }

        private void OnDeleteFolderOperationCompleted(object arg)
        {
            if ((this.DeleteFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFolderCompleted(this, new DeleteFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/CreateFolder", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage CreateFolder(string Login, string Password, string dirPath)
        {
            object[] results = this.Invoke("CreateFolder", new object[] {
                        Login,
                        Password,
                        dirPath});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void CreateFolderAsync(string Login, string Password, string dirPath)
        {
            this.CreateFolderAsync(Login, Password, dirPath, null);
        }

        /// <remarks/>
        public void CreateFolderAsync(string Login, string Password, string dirPath, object userState)
        {
            if ((this.CreateFolderOperationCompleted == null))
            {
                this.CreateFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateFolderOperationCompleted);
            }
            this.InvokeAsync("CreateFolder", new object[] {
                        Login,
                        Password,
                        dirPath}, this.CreateFolderOperationCompleted, userState);
        }

        private void OnCreateFolderOperationCompleted(object arg)
        {
            if ((this.CreateFolderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateFolderCompleted(this, new CreateFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/LoadFile", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage LoadFile(string Login, string Password, string relPathFileName, string encodedData)
        {
            object[] results = this.Invoke("LoadFile", new object[] {
                        Login,
                        Password,
                        relPathFileName,
                        encodedData});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void LoadFileAsync(string Login, string Password, string relPathFileName, string encodedData)
        {
            this.LoadFileAsync(Login, Password, relPathFileName, encodedData, null);
        }

        /// <remarks/>
        public void LoadFileAsync(string Login, string Password, string relPathFileName, string encodedData, object userState)
        {
            if ((this.LoadFileOperationCompleted == null))
            {
                this.LoadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnLoadFileOperationCompleted);
            }
            this.InvokeAsync("LoadFile", new object[] {
                        Login,
                        Password,
                        relPathFileName,
                        encodedData}, this.LoadFileOperationCompleted, userState);
        }

        private void OnLoadFileOperationCompleted(object arg)
        {
            if ((this.LoadFileCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.LoadFileCompleted(this, new LoadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/ApplyGateDll", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage ApplyGateDll(string Login, string Password, string fileName, string encodedData)
        {
            object[] results = this.Invoke("ApplyGateDll", new object[] {
                        Login,
                        Password,
                        fileName,
                        encodedData});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void ApplyGateDllAsync(string Login, string Password, string fileName, string encodedData)
        {
            this.ApplyGateDllAsync(Login, Password, fileName, encodedData, null);
        }

        /// <remarks/>
        public void ApplyGateDllAsync(string Login, string Password, string fileName, string encodedData, object userState)
        {
            if ((this.ApplyGateDllOperationCompleted == null))
            {
                this.ApplyGateDllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnApplyGateDllOperationCompleted);
            }
            this.InvokeAsync("ApplyGateDll", new object[] {
                        Login,
                        Password,
                        fileName,
                        encodedData}, this.ApplyGateDllOperationCompleted, userState);
        }

        private void OnApplyGateDllOperationCompleted(object arg)
        {
            if ((this.ApplyGateDllCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ApplyGateDllCompleted(this, new ApplyGateDllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/ValidateGateDll", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage ValidateGateDll(string Login, string Password, string fileName, string encodedData)
        {
            object[] results = this.Invoke("ValidateGateDll", new object[] {
                        Login,
                        Password,
                        fileName,
                        encodedData});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void ValidateGateDllAsync(string Login, string Password, string fileName, string encodedData)
        {
            this.ValidateGateDllAsync(Login, Password, fileName, encodedData, null);
        }

        /// <remarks/>
        public void ValidateGateDllAsync(string Login, string Password, string fileName, string encodedData, object userState)
        {
            if ((this.ValidateGateDllOperationCompleted == null))
            {
                this.ValidateGateDllOperationCompleted = new System.Threading.SendOrPostCallback(this.OnValidateGateDllOperationCompleted);
            }
            this.InvokeAsync("ValidateGateDll", new object[] {
                        Login,
                        Password,
                        fileName,
                        encodedData}, this.ValidateGateDllOperationCompleted, userState);
        }

        private void OnValidateGateDllOperationCompleted(object arg)
        {
            if ((this.ValidateGateDllCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ValidateGateDllCompleted(this, new ValidateGateDllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/GetRegisteredProtocols", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage GetRegisteredProtocols(string Login, string Password)
        {
            object[] results = this.Invoke("GetRegisteredProtocols", new object[] {
                        Login,
                        Password});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void GetRegisteredProtocolsAsync(string Login, string Password)
        {
            this.GetRegisteredProtocolsAsync(Login, Password, null);
        }

        /// <remarks/>
        public void GetRegisteredProtocolsAsync(string Login, string Password, object userState)
        {
            if ((this.GetRegisteredProtocolsOperationCompleted == null))
            {
                this.GetRegisteredProtocolsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRegisteredProtocolsOperationCompleted);
            }
            this.InvokeAsync("GetRegisteredProtocols", new object[] {
                        Login,
                        Password}, this.GetRegisteredProtocolsOperationCompleted, userState);
        }

        private void OnGetRegisteredProtocolsOperationCompleted(object arg)
        {
            if ((this.GetRegisteredProtocolsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRegisteredProtocolsCompleted(this, new GetRegisteredProtocolsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/GetPaysInPool", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage GetPaysInPool(string Login, string Password, int protocolId)
        {
            object[] results = this.Invoke("GetPaysInPool", new object[] {
                        Login,
                        Password,
                        protocolId});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void GetPaysInPoolAsync(string Login, string Password, int protocolId)
        {
            this.GetPaysInPoolAsync(Login, Password, protocolId, null);
        }

        /// <remarks/>
        public void GetPaysInPoolAsync(string Login, string Password, int protocolId, object userState)
        {
            if ((this.GetPaysInPoolOperationCompleted == null))
            {
                this.GetPaysInPoolOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPaysInPoolOperationCompleted);
            }
            this.InvokeAsync("GetPaysInPool", new object[] {
                        Login,
                        Password,
                        protocolId}, this.GetPaysInPoolOperationCompleted, userState);
        }

        private void OnGetPaysInPoolOperationCompleted(object arg)
        {
            if ((this.GetPaysInPoolCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPaysInPoolCompleted(this, new GetPaysInPoolCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/GetAsyncData", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage GetAsyncData(string Login, string Password, int protocolId)
        {
            object[] results = this.Invoke("GetAsyncData", new object[] {
                        Login,
                        Password,
                        protocolId});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void GetAsyncDataAsync(string Login, string Password, int protocolId)
        {
            this.GetAsyncDataAsync(Login, Password, protocolId, null);
        }

        /// <remarks/>
        public void GetAsyncDataAsync(string Login, string Password, int protocolId, object userState)
        {
            if ((this.GetAsyncDataOperationCompleted == null))
            {
                this.GetAsyncDataOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAsyncDataOperationCompleted);
            }
            this.InvokeAsync("GetAsyncData", new object[] {
                        Login,
                        Password,
                        protocolId}, this.GetAsyncDataOperationCompleted, userState);
        }

        private void OnGetAsyncDataOperationCompleted(object arg)
        {
            if ((this.GetAsyncDataCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAsyncDataCompleted(this, new GetAsyncDataCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/DisableAddons", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage DisableAddons(string Login, string Password, int protocolId)
        {
            object[] results = this.Invoke("DisableAddons", new object[] {
                        Login,
                        Password,
                        protocolId});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void DisableAddonsAsync(string Login, string Password, int protocolId)
        {
            this.DisableAddonsAsync(Login, Password, protocolId, null);
        }

        /// <remarks/>
        public void DisableAddonsAsync(string Login, string Password, int protocolId, object userState)
        {
            if ((this.DisableAddonsOperationCompleted == null))
            {
                this.DisableAddonsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDisableAddonsOperationCompleted);
            }
            this.InvokeAsync("DisableAddons", new object[] {
                        Login,
                        Password,
                        protocolId}, this.DisableAddonsOperationCompleted, userState);
        }

        private void OnDisableAddonsOperationCompleted(object arg)
        {
            if ((this.DisableAddonsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DisableAddonsCompleted(this, new DisableAddonsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/EnableAddons", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage EnableAddons(string Login, string Password, int protocolId)
        {
            object[] results = this.Invoke("EnableAddons", new object[] {
                        Login,
                        Password,
                        protocolId});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void EnableAddonsAsync(string Login, string Password, int protocolId)
        {
            this.EnableAddonsAsync(Login, Password, protocolId, null);
        }

        /// <remarks/>
        public void EnableAddonsAsync(string Login, string Password, int protocolId, object userState)
        {
            if ((this.EnableAddonsOperationCompleted == null))
            {
                this.EnableAddonsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnEnableAddonsOperationCompleted);
            }
            this.InvokeAsync("EnableAddons", new object[] {
                        Login,
                        Password,
                        protocolId}, this.EnableAddonsOperationCompleted, userState);
        }

        private void OnEnableAddonsOperationCompleted(object arg)
        {
            if ((this.EnableAddonsCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.EnableAddonsCompleted(this, new EnableAddonsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/DomainMonitoring", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage DomainMonitoring(string Login, string Password)
        {
            object[] results = this.Invoke("DomainMonitoring", new object[] {
                        Login,
                        Password});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void DomainMonitoringAsync(string Login, string Password)
        {
            this.DomainMonitoringAsync(Login, Password, null);
        }

        /// <remarks/>
        public void DomainMonitoringAsync(string Login, string Password, object userState)
        {
            if ((this.DomainMonitoringOperationCompleted == null))
            {
                this.DomainMonitoringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDomainMonitoringOperationCompleted);
            }
            this.InvokeAsync("DomainMonitoring", new object[] {
                        Login,
                        Password}, this.DomainMonitoringOperationCompleted, userState);
        }

        private void OnDomainMonitoringOperationCompleted(object arg)
        {
            if ((this.DomainMonitoringCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DomainMonitoringCompleted(this, new DomainMonitoringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/GetEventLogNames", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage GetEventLogNames(string Login, string Password)
        {
            object[] results = this.Invoke("GetEventLogNames", new object[] {
                        Login,
                        Password});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void GetEventLogNamesAsync(string Login, string Password)
        {
            this.GetEventLogNamesAsync(Login, Password, null);
        }

        /// <remarks/>
        public void GetEventLogNamesAsync(string Login, string Password, object userState)
        {
            if ((this.GetEventLogNamesOperationCompleted == null))
            {
                this.GetEventLogNamesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetEventLogNamesOperationCompleted);
            }
            this.InvokeAsync("GetEventLogNames", new object[] {
                        Login,
                        Password}, this.GetEventLogNamesOperationCompleted, userState);
        }

        private void OnGetEventLogNamesOperationCompleted(object arg)
        {
            if ((this.GetEventLogNamesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetEventLogNamesCompleted(this, new GetEventLogNamesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/GetLogTypes", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage GetLogTypes(string Login, string Password)
        {
            object[] results = this.Invoke("GetLogTypes", new object[] {
                        Login,
                        Password});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void GetLogTypesAsync(string Login, string Password)
        {
            this.GetLogTypesAsync(Login, Password, null);
        }

        /// <remarks/>
        public void GetLogTypesAsync(string Login, string Password, object userState)
        {
            if ((this.GetLogTypesOperationCompleted == null))
            {
                this.GetLogTypesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLogTypesOperationCompleted);
            }
            this.InvokeAsync("GetLogTypes", new object[] {
                        Login,
                        Password}, this.GetLogTypesOperationCompleted, userState);
        }

        private void OnGetLogTypesOperationCompleted(object arg)
        {
            if ((this.GetLogTypesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLogTypesCompleted(this, new GetLogTypesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/CreateGateCode", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage CreateGateCode(string Login, string Password, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> ProtocolID, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> GateID, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> GateCode, string GateCodeString, byte Status, int Code, int GateStatus, string GateCodeName, int StageNum, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> ARStatus, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> AROsmpCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> GateNextTryDate)
        {
            object[] results = this.Invoke("CreateGateCode", new object[] {
                        Login,
                        Password,
                        ProtocolID,
                        GateID,
                        GateCode,
                        GateCodeString,
                        Status,
                        Code,
                        GateStatus,
                        GateCodeName,
                        StageNum,
                        ARStatus,
                        AROsmpCode,
                        GateNextTryDate});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void CreateGateCodeAsync(string Login, string Password, System.Nullable<int> ProtocolID, System.Nullable<int> GateID, System.Nullable<int> GateCode, string GateCodeString, byte Status, int Code, int GateStatus, string GateCodeName, int StageNum, System.Nullable<int> ARStatus, System.Nullable<int> AROsmpCode, System.Nullable<int> GateNextTryDate)
        {
            this.CreateGateCodeAsync(Login, Password, ProtocolID, GateID, GateCode, GateCodeString, Status, Code, GateStatus, GateCodeName, StageNum, ARStatus, AROsmpCode, GateNextTryDate, null);
        }

        /// <remarks/>
        public void CreateGateCodeAsync(string Login, string Password, System.Nullable<int> ProtocolID, System.Nullable<int> GateID, System.Nullable<int> GateCode, string GateCodeString, byte Status, int Code, int GateStatus, string GateCodeName, int StageNum, System.Nullable<int> ARStatus, System.Nullable<int> AROsmpCode, System.Nullable<int> GateNextTryDate, object userState)
        {
            if ((this.CreateGateCodeOperationCompleted == null))
            {
                this.CreateGateCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateGateCodeOperationCompleted);
            }
            this.InvokeAsync("CreateGateCode", new object[] {
                        Login,
                        Password,
                        ProtocolID,
                        GateID,
                        GateCode,
                        GateCodeString,
                        Status,
                        Code,
                        GateStatus,
                        GateCodeName,
                        StageNum,
                        ARStatus,
                        AROsmpCode,
                        GateNextTryDate}, this.CreateGateCodeOperationCompleted, userState);
        }

        private void OnCreateGateCodeOperationCompleted(object arg)
        {
            if ((this.CreateGateCodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateGateCodeCompleted(this, new CreateGateCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/ModifyGateCode", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage ModifyGateCode(string Login, string Password, int GateCodeID, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> ProtocolID, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> GateID, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> GateCode, string GateCodeString, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<byte> Status, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> Code, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> GateStatus, string GateCodeName, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> StageNum, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> ARStatus, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> AROsmpCode, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> GateNextTryDate)
        {
            object[] results = this.Invoke("ModifyGateCode", new object[] {
                        Login,
                        Password,
                        GateCodeID,
                        ProtocolID,
                        GateID,
                        GateCode,
                        GateCodeString,
                        Status,
                        Code,
                        GateStatus,
                        GateCodeName,
                        StageNum,
                        ARStatus,
                        AROsmpCode,
                        GateNextTryDate});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void ModifyGateCodeAsync(string Login, string Password, int GateCodeID, System.Nullable<int> ProtocolID, System.Nullable<int> GateID, System.Nullable<int> GateCode, string GateCodeString, System.Nullable<byte> Status, System.Nullable<int> Code, System.Nullable<int> GateStatus, string GateCodeName, System.Nullable<int> StageNum, System.Nullable<int> ARStatus, System.Nullable<int> AROsmpCode, System.Nullable<int> GateNextTryDate)
        {
            this.ModifyGateCodeAsync(Login, Password, GateCodeID, ProtocolID, GateID, GateCode, GateCodeString, Status, Code, GateStatus, GateCodeName, StageNum, ARStatus, AROsmpCode, GateNextTryDate, null);
        }

        /// <remarks/>
        public void ModifyGateCodeAsync(
                    string Login,
                    string Password,
                    int GateCodeID,
                    System.Nullable<int> ProtocolID,
                    System.Nullable<int> GateID,
                    System.Nullable<int> GateCode,
                    string GateCodeString,
                    System.Nullable<byte> Status,
                    System.Nullable<int> Code,
                    System.Nullable<int> GateStatus,
                    string GateCodeName,
                    System.Nullable<int> StageNum,
                    System.Nullable<int> ARStatus,
                    System.Nullable<int> AROsmpCode,
                    System.Nullable<int> GateNextTryDate,
                    object userState)
        {
            if ((this.ModifyGateCodeOperationCompleted == null))
            {
                this.ModifyGateCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyGateCodeOperationCompleted);
            }
            this.InvokeAsync("ModifyGateCode", new object[] {
                        Login,
                        Password,
                        GateCodeID,
                        ProtocolID,
                        GateID,
                        GateCode,
                        GateCodeString,
                        Status,
                        Code,
                        GateStatus,
                        GateCodeName,
                        StageNum,
                        ARStatus,
                        AROsmpCode,
                        GateNextTryDate}, this.ModifyGateCodeOperationCompleted, userState);
        }

        private void OnModifyGateCodeOperationCompleted(object arg)
        {
            if ((this.ModifyGateCodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyGateCodeCompleted(this, new ModifyGateCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/DeleteGateCode", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage DeleteGateCode(string Login, string Password, int GateCodeID)
        {
            object[] results = this.Invoke("DeleteGateCode", new object[] {
                        Login,
                        Password,
                        GateCodeID});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void DeleteGateCodeAsync(string Login, string Password, int GateCodeID)
        {
            this.DeleteGateCodeAsync(Login, Password, GateCodeID, null);
        }

        /// <remarks/>
        public void DeleteGateCodeAsync(string Login, string Password, int GateCodeID, object userState)
        {
            if ((this.DeleteGateCodeOperationCompleted == null))
            {
                this.DeleteGateCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteGateCodeOperationCompleted);
            }
            this.InvokeAsync("DeleteGateCode", new object[] {
                        Login,
                        Password,
                        GateCodeID}, this.DeleteGateCodeOperationCompleted, userState);
        }

        private void OnDeleteGateCodeOperationCompleted(object arg)
        {
            if ((this.DeleteGateCodeCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteGateCodeCompleted(this, new DeleteGateCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/DeleteGateService", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage DeleteGateService(string Login, string Password, int GateServiceID)
        {
            object[] results = this.Invoke("DeleteGateService", new object[] {
                        Login,
                        Password,
                        GateServiceID});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void DeleteGateServiceAsync(string Login, string Password, int GateServiceID)
        {
            this.DeleteGateServiceAsync(Login, Password, GateServiceID, null);
        }

        /// <remarks/>
        public void DeleteGateServiceAsync(string Login, string Password, int GateServiceID, object userState)
        {
            if ((this.DeleteGateServiceOperationCompleted == null))
            {
                this.DeleteGateServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteGateServiceOperationCompleted);
            }
            this.InvokeAsync("DeleteGateService", new object[] {
                        Login,
                        Password,
                        GateServiceID}, this.DeleteGateServiceOperationCompleted, userState);
        }

        private void OnDeleteGateServiceOperationCompleted(object arg)
        {
            if ((this.DeleteGateServiceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteGateServiceCompleted(this, new DeleteGateServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/CreateService", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage CreateService(
                    string Login,
                    string Password,
                    string ServiceName,
                    int ServiceType,
                    int ProviderID,
                    string ServiceInfo,
                    bool Enabled,
                    string Comment,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<bool> NeedOnlineCheck,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<bool> PinCodes,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<bool> NeedZeroCheck,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<decimal> ZeroCheckSum,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<bool> NeedOnLinePay,
                    bool EnabledToSend,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<bool> AllowQiwiPin,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<short> MaxPinCards,
                    bool AreAmountsFixed,
                    bool IsSummingAllowed)
        {
            object[] results = this.Invoke("CreateService", new object[] {
                        Login,
                        Password,
                        ServiceName,
                        ServiceType,
                        ProviderID,
                        ServiceInfo,
                        Enabled,
                        Comment,
                        NeedOnlineCheck,
                        PinCodes,
                        NeedZeroCheck,
                        ZeroCheckSum,
                        NeedOnLinePay,
                        EnabledToSend,
                        AllowQiwiPin,
                        MaxPinCards,
                        AreAmountsFixed,
                        IsSummingAllowed});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void CreateServiceAsync(
                    string Login,
                    string Password,
                    string ServiceName,
                    int ServiceType,
                    int ProviderID,
                    string ServiceInfo,
                    bool Enabled,
                    string Comment,
                    System.Nullable<bool> NeedOnlineCheck,
                    System.Nullable<bool> PinCodes,
                    System.Nullable<bool> NeedZeroCheck,
                    System.Nullable<decimal> ZeroCheckSum,
                    System.Nullable<bool> NeedOnLinePay,
                    bool EnabledToSend,
                    System.Nullable<bool> AllowQiwiPin,
                    System.Nullable<short> MaxPinCards,
                    bool AreAmountsFixed,
                    bool IsSummingAllowed)
        {
            this.CreateServiceAsync(Login, Password, ServiceName, ServiceType, ProviderID, ServiceInfo, Enabled, Comment, NeedOnlineCheck, PinCodes, NeedZeroCheck, ZeroCheckSum, NeedOnLinePay, EnabledToSend, AllowQiwiPin, MaxPinCards, AreAmountsFixed, IsSummingAllowed, null);
        }

        /// <remarks/>
        public void CreateServiceAsync(
                    string Login,
                    string Password,
                    string ServiceName,
                    int ServiceType,
                    int ProviderID,
                    string ServiceInfo,
                    bool Enabled,
                    string Comment,
                    System.Nullable<bool> NeedOnlineCheck,
                    System.Nullable<bool> PinCodes,
                    System.Nullable<bool> NeedZeroCheck,
                    System.Nullable<decimal> ZeroCheckSum,
                    System.Nullable<bool> NeedOnLinePay,
                    bool EnabledToSend,
                    System.Nullable<bool> AllowQiwiPin,
                    System.Nullable<short> MaxPinCards,
                    bool AreAmountsFixed,
                    bool IsSummingAllowed,
                    object userState)
        {
            if ((this.CreateServiceOperationCompleted == null))
            {
                this.CreateServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateServiceOperationCompleted);
            }
            this.InvokeAsync("CreateService", new object[] {
                        Login,
                        Password,
                        ServiceName,
                        ServiceType,
                        ProviderID,
                        ServiceInfo,
                        Enabled,
                        Comment,
                        NeedOnlineCheck,
                        PinCodes,
                        NeedZeroCheck,
                        ZeroCheckSum,
                        NeedOnLinePay,
                        EnabledToSend,
                        AllowQiwiPin,
                        MaxPinCards,
                        AreAmountsFixed,
                        IsSummingAllowed}, this.CreateServiceOperationCompleted, userState);
        }

        private void OnCreateServiceOperationCompleted(object arg)
        {
            if ((this.CreateServiceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateServiceCompleted(this, new CreateServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/ModifyService", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage ModifyService(
                    string Login,
                    string Password,
                    int ServiceID,
                    string ServiceName,
                    int ServiceType,
                    int ProviderID,
                    string ServiceInfo,
                    bool Enabled,
                    string Comment,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<bool> NeedOnlineCheck,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<bool> PinCodes,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<bool> NeedZeroCheck,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<decimal> ZeroCheckSum,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<bool> NeedOnLinePay,
                    bool EnabledToSend,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<bool> AllowQiwiPin,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<short> MaxPinCards,
                    bool IsSummingAllowed)
        {
            object[] results = this.Invoke("ModifyService", new object[] {
                        Login,
                        Password,
                        ServiceID,
                        ServiceName,
                        ServiceType,
                        ProviderID,
                        ServiceInfo,
                        Enabled,
                        Comment,
                        NeedOnlineCheck,
                        PinCodes,
                        NeedZeroCheck,
                        ZeroCheckSum,
                        NeedOnLinePay,
                        EnabledToSend,
                        AllowQiwiPin,
                        MaxPinCards,
                        IsSummingAllowed});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void ModifyServiceAsync(
                    string Login,
                    string Password,
                    int ServiceID,
                    string ServiceName,
                    int ServiceType,
                    int ProviderID,
                    string ServiceInfo,
                    bool Enabled,
                    string Comment,
                    System.Nullable<bool> NeedOnlineCheck,
                    System.Nullable<bool> PinCodes,
                    System.Nullable<bool> NeedZeroCheck,
                    System.Nullable<decimal> ZeroCheckSum,
                    System.Nullable<bool> NeedOnLinePay,
                    bool EnabledToSend,
                    System.Nullable<bool> AllowQiwiPin,
                    System.Nullable<short> MaxPinCards,
                    bool IsSummingAllowed)
        {
            this.ModifyServiceAsync(Login, Password, ServiceID, ServiceName, ServiceType, ProviderID, ServiceInfo, Enabled, Comment, NeedOnlineCheck, PinCodes, NeedZeroCheck, ZeroCheckSum, NeedOnLinePay, EnabledToSend, AllowQiwiPin, MaxPinCards, IsSummingAllowed, null);
        }

        /// <remarks/>
        public void ModifyServiceAsync(
                    string Login,
                    string Password,
                    int ServiceID,
                    string ServiceName,
                    int ServiceType,
                    int ProviderID,
                    string ServiceInfo,
                    bool Enabled,
                    string Comment,
                    System.Nullable<bool> NeedOnlineCheck,
                    System.Nullable<bool> PinCodes,
                    System.Nullable<bool> NeedZeroCheck,
                    System.Nullable<decimal> ZeroCheckSum,
                    System.Nullable<bool> NeedOnLinePay,
                    bool EnabledToSend,
                    System.Nullable<bool> AllowQiwiPin,
                    System.Nullable<short> MaxPinCards,
                    bool IsSummingAllowed,
                    object userState)
        {
            if ((this.ModifyServiceOperationCompleted == null))
            {
                this.ModifyServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyServiceOperationCompleted);
            }
            this.InvokeAsync("ModifyService", new object[] {
                        Login,
                        Password,
                        ServiceID,
                        ServiceName,
                        ServiceType,
                        ProviderID,
                        ServiceInfo,
                        Enabled,
                        Comment,
                        NeedOnlineCheck,
                        PinCodes,
                        NeedZeroCheck,
                        ZeroCheckSum,
                        NeedOnLinePay,
                        EnabledToSend,
                        AllowQiwiPin,
                        MaxPinCards,
                        IsSummingAllowed}, this.ModifyServiceOperationCompleted, userState);
        }

        private void OnModifyServiceOperationCompleted(object arg)
        {
            if ((this.ModifyServiceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyServiceCompleted(this, new ModifyServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/CreateOsmp_Service", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage CreateOsmp_Service(string Login, string Password, int OsmpProviderID, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> OsmpServiceID, int ServiceID)
        {
            object[] results = this.Invoke("CreateOsmp_Service", new object[] {
                        Login,
                        Password,
                        OsmpProviderID,
                        OsmpServiceID,
                        ServiceID});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void CreateOsmp_ServiceAsync(string Login, string Password, int OsmpProviderID, System.Nullable<int> OsmpServiceID, int ServiceID)
        {
            this.CreateOsmp_ServiceAsync(Login, Password, OsmpProviderID, OsmpServiceID, ServiceID, null);
        }

        /// <remarks/>
        public void CreateOsmp_ServiceAsync(string Login, string Password, int OsmpProviderID, System.Nullable<int> OsmpServiceID, int ServiceID, object userState)
        {
            if ((this.CreateOsmp_ServiceOperationCompleted == null))
            {
                this.CreateOsmp_ServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateOsmp_ServiceOperationCompleted);
            }
            this.InvokeAsync("CreateOsmp_Service", new object[] {
                        Login,
                        Password,
                        OsmpProviderID,
                        OsmpServiceID,
                        ServiceID}, this.CreateOsmp_ServiceOperationCompleted, userState);
        }

        private void OnCreateOsmp_ServiceOperationCompleted(object arg)
        {
            if ((this.CreateOsmp_ServiceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateOsmp_ServiceCompleted(this, new CreateOsmp_ServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/ModifyOsmp_Service", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage ModifyOsmp_Service(string Login, string Password, int Osmp_ServiceID, int OsmpProviderID, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> OsmpServiceID)
        {
            object[] results = this.Invoke("ModifyOsmp_Service", new object[] {
                        Login,
                        Password,
                        Osmp_ServiceID,
                        OsmpProviderID,
                        OsmpServiceID});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void ModifyOsmp_ServiceAsync(string Login, string Password, int Osmp_ServiceID, int OsmpProviderID, System.Nullable<int> OsmpServiceID)
        {
            this.ModifyOsmp_ServiceAsync(Login, Password, Osmp_ServiceID, OsmpProviderID, OsmpServiceID, null);
        }

        /// <remarks/>
        public void ModifyOsmp_ServiceAsync(string Login, string Password, int Osmp_ServiceID, int OsmpProviderID, System.Nullable<int> OsmpServiceID, object userState)
        {
            if ((this.ModifyOsmp_ServiceOperationCompleted == null))
            {
                this.ModifyOsmp_ServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyOsmp_ServiceOperationCompleted);
            }
            this.InvokeAsync("ModifyOsmp_Service", new object[] {
                        Login,
                        Password,
                        Osmp_ServiceID,
                        OsmpProviderID,
                        OsmpServiceID}, this.ModifyOsmp_ServiceOperationCompleted, userState);
        }

        private void OnModifyOsmp_ServiceOperationCompleted(object arg)
        {
            if ((this.ModifyOsmp_ServiceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyOsmp_ServiceCompleted(this, new ModifyOsmp_ServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/GateServiceBinding", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage GateServiceBinding(string Login, string Password, int ServiceID, int GateServiceID)
        {
            object[] results = this.Invoke("GateServiceBinding", new object[] {
                        Login,
                        Password,
                        ServiceID,
                        GateServiceID});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void GateServiceBindingAsync(string Login, string Password, int ServiceID, int GateServiceID)
        {
            this.GateServiceBindingAsync(Login, Password, ServiceID, GateServiceID, null);
        }

        /// <remarks/>
        public void GateServiceBindingAsync(string Login, string Password, int ServiceID, int GateServiceID, object userState)
        {
            if ((this.GateServiceBindingOperationCompleted == null))
            {
                this.GateServiceBindingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGateServiceBindingOperationCompleted);
            }
            this.InvokeAsync("GateServiceBinding", new object[] {
                        Login,
                        Password,
                        ServiceID,
                        GateServiceID}, this.GateServiceBindingOperationCompleted, userState);
        }

        private void OnGateServiceBindingOperationCompleted(object arg)
        {
            if ((this.GateServiceBindingCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GateServiceBindingCompleted(this, new GateServiceBindingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/CreateGateService", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage CreateGateService(
                    string Login,
                    string Password,
                    int GateID,
                    int ServiceID,
                    decimal ProviderProfit,
                    bool ProviderProfitIsFixed,
                    string NumberMask,
                    string NumberRegEx,
                    string GateTemplate,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<decimal> MinPaySum,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<decimal> MaxPaySum,
                    string TestNumber,
                    bool TestModeAvailable,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<System.DateTime> WaitToTime,
                    bool TechnicallyReady,
                    bool JuridicallyReady,
                    bool Enabled,
                    string Comment,
                    string ExtraRegex,
                    string GateServiceInfo,
                    bool EnabledToSend,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<short> TimeZoneID)
        {
            object[] results = this.Invoke("CreateGateService", new object[] {
                        Login,
                        Password,
                        GateID,
                        ServiceID,
                        ProviderProfit,
                        ProviderProfitIsFixed,
                        NumberMask,
                        NumberRegEx,
                        GateTemplate,
                        MinPaySum,
                        MaxPaySum,
                        TestNumber,
                        TestModeAvailable,
                        WaitToTime,
                        TechnicallyReady,
                        JuridicallyReady,
                        Enabled,
                        Comment,
                        ExtraRegex,
                        GateServiceInfo,
                        EnabledToSend,
                        TimeZoneID});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void CreateGateServiceAsync(
                    string Login,
                    string Password,
                    int GateID,
                    int ServiceID,
                    decimal ProviderProfit,
                    bool ProviderProfitIsFixed,
                    string NumberMask,
                    string NumberRegEx,
                    string GateTemplate,
                    System.Nullable<decimal> MinPaySum,
                    System.Nullable<decimal> MaxPaySum,
                    string TestNumber,
                    bool TestModeAvailable,
                    System.Nullable<System.DateTime> WaitToTime,
                    bool TechnicallyReady,
                    bool JuridicallyReady,
                    bool Enabled,
                    string Comment,
                    string ExtraRegex,
                    string GateServiceInfo,
                    bool EnabledToSend,
                    System.Nullable<short> TimeZoneID)
        {
            this.CreateGateServiceAsync(Login, Password, GateID, ServiceID, ProviderProfit, ProviderProfitIsFixed, NumberMask, NumberRegEx, GateTemplate, MinPaySum, MaxPaySum, TestNumber, TestModeAvailable, WaitToTime, TechnicallyReady, JuridicallyReady, Enabled, Comment, ExtraRegex, GateServiceInfo, EnabledToSend, TimeZoneID, null);
        }

        /// <remarks/>
        public void CreateGateServiceAsync(
                    string Login,
                    string Password,
                    int GateID,
                    int ServiceID,
                    decimal ProviderProfit,
                    bool ProviderProfitIsFixed,
                    string NumberMask,
                    string NumberRegEx,
                    string GateTemplate,
                    System.Nullable<decimal> MinPaySum,
                    System.Nullable<decimal> MaxPaySum,
                    string TestNumber,
                    bool TestModeAvailable,
                    System.Nullable<System.DateTime> WaitToTime,
                    bool TechnicallyReady,
                    bool JuridicallyReady,
                    bool Enabled,
                    string Comment,
                    string ExtraRegex,
                    string GateServiceInfo,
                    bool EnabledToSend,
                    System.Nullable<short> TimeZoneID,
                    object userState)
        {
            if ((this.CreateGateServiceOperationCompleted == null))
            {
                this.CreateGateServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateGateServiceOperationCompleted);
            }
            this.InvokeAsync("CreateGateService", new object[] {
                        Login,
                        Password,
                        GateID,
                        ServiceID,
                        ProviderProfit,
                        ProviderProfitIsFixed,
                        NumberMask,
                        NumberRegEx,
                        GateTemplate,
                        MinPaySum,
                        MaxPaySum,
                        TestNumber,
                        TestModeAvailable,
                        WaitToTime,
                        TechnicallyReady,
                        JuridicallyReady,
                        Enabled,
                        Comment,
                        ExtraRegex,
                        GateServiceInfo,
                        EnabledToSend,
                        TimeZoneID}, this.CreateGateServiceOperationCompleted, userState);
        }

        private void OnCreateGateServiceOperationCompleted(object arg)
        {
            if ((this.CreateGateServiceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateGateServiceCompleted(this, new CreateGateServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/CreatePermission", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage CreatePermission(string Login, string Password, int CSRoleID, string PermissionName, int PermissionTypeID)
        {
            object[] results = this.Invoke("CreatePermission", new object[] {
                        Login,
                        Password,
                        CSRoleID,
                        PermissionName,
                        PermissionTypeID});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void CreatePermissionAsync(string Login, string Password, int CSRoleID, string PermissionName, int PermissionTypeID)
        {
            this.CreatePermissionAsync(Login, Password, CSRoleID, PermissionName, PermissionTypeID, null);
        }

        /// <remarks/>
        public void CreatePermissionAsync(string Login, string Password, int CSRoleID, string PermissionName, int PermissionTypeID, object userState)
        {
            if ((this.CreatePermissionOperationCompleted == null))
            {
                this.CreatePermissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreatePermissionOperationCompleted);
            }
            this.InvokeAsync("CreatePermission", new object[] {
                        Login,
                        Password,
                        CSRoleID,
                        PermissionName,
                        PermissionTypeID}, this.CreatePermissionOperationCompleted, userState);
        }

        private void OnCreatePermissionOperationCompleted(object arg)
        {
            if ((this.CreatePermissionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreatePermissionCompleted(this, new CreatePermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/ModifyPermission", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage ModifyPermission(string Login, string Password, int CSRoleID, string PermissionName, int PermissionTypeID, int CSPermissionID)
        {
            object[] results = this.Invoke("ModifyPermission", new object[] {
                        Login,
                        Password,
                        CSRoleID,
                        PermissionName,
                        PermissionTypeID,
                        CSPermissionID});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void ModifyPermissionAsync(string Login, string Password, int CSRoleID, string PermissionName, int PermissionTypeID, int CSPermissionID)
        {
            this.ModifyPermissionAsync(Login, Password, CSRoleID, PermissionName, PermissionTypeID, CSPermissionID, null);
        }

        /// <remarks/>
        public void ModifyPermissionAsync(string Login, string Password, int CSRoleID, string PermissionName, int PermissionTypeID, int CSPermissionID, object userState)
        {
            if ((this.ModifyPermissionOperationCompleted == null))
            {
                this.ModifyPermissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyPermissionOperationCompleted);
            }
            this.InvokeAsync("ModifyPermission", new object[] {
                        Login,
                        Password,
                        CSRoleID,
                        PermissionName,
                        PermissionTypeID,
                        CSPermissionID}, this.ModifyPermissionOperationCompleted, userState);
        }

        private void OnModifyPermissionOperationCompleted(object arg)
        {
            if ((this.ModifyPermissionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyPermissionCompleted(this, new ModifyPermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/DeletePermission", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage DeletePermission(string Login, string Password, int CSPermissionID)
        {
            object[] results = this.Invoke("DeletePermission", new object[] {
                        Login,
                        Password,
                        CSPermissionID});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void DeletePermissionAsync(string Login, string Password, int CSPermissionID)
        {
            this.DeletePermissionAsync(Login, Password, CSPermissionID, null);
        }

        /// <remarks/>
        public void DeletePermissionAsync(string Login, string Password, int CSPermissionID, object userState)
        {
            if ((this.DeletePermissionOperationCompleted == null))
            {
                this.DeletePermissionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeletePermissionOperationCompleted);
            }
            this.InvokeAsync("DeletePermission", new object[] {
                        Login,
                        Password,
                        CSPermissionID}, this.DeletePermissionOperationCompleted, userState);
        }

        private void OnDeletePermissionOperationCompleted(object arg)
        {
            if ((this.DeletePermissionCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeletePermissionCompleted(this, new DeletePermissionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/CreateRole", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage CreateRole(string Login, string Password, string RoleName, string RoleDescription)
        {
            object[] results = this.Invoke("CreateRole", new object[] {
                        Login,
                        Password,
                        RoleName,
                        RoleDescription});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void CreateRoleAsync(string Login, string Password, string RoleName, string RoleDescription)
        {
            this.CreateRoleAsync(Login, Password, RoleName, RoleDescription, null);
        }

        /// <remarks/>
        public void CreateRoleAsync(string Login, string Password, string RoleName, string RoleDescription, object userState)
        {
            if ((this.CreateRoleOperationCompleted == null))
            {
                this.CreateRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateRoleOperationCompleted);
            }
            this.InvokeAsync("CreateRole", new object[] {
                        Login,
                        Password,
                        RoleName,
                        RoleDescription}, this.CreateRoleOperationCompleted, userState);
        }

        private void OnCreateRoleOperationCompleted(object arg)
        {
            if ((this.CreateRoleCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateRoleCompleted(this, new CreateRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/ModifyRole", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage ModifyRole(string Login, string Password, int CSRoleID, string RoleName, string RoleDescription)
        {
            object[] results = this.Invoke("ModifyRole", new object[] {
                        Login,
                        Password,
                        CSRoleID,
                        RoleName,
                        RoleDescription});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void ModifyRoleAsync(string Login, string Password, int CSRoleID, string RoleName, string RoleDescription)
        {
            this.ModifyRoleAsync(Login, Password, CSRoleID, RoleName, RoleDescription, null);
        }

        /// <remarks/>
        public void ModifyRoleAsync(string Login, string Password, int CSRoleID, string RoleName, string RoleDescription, object userState)
        {
            if ((this.ModifyRoleOperationCompleted == null))
            {
                this.ModifyRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyRoleOperationCompleted);
            }
            this.InvokeAsync("ModifyRole", new object[] {
                        Login,
                        Password,
                        CSRoleID,
                        RoleName,
                        RoleDescription}, this.ModifyRoleOperationCompleted, userState);
        }

        private void OnModifyRoleOperationCompleted(object arg)
        {
            if ((this.ModifyRoleCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyRoleCompleted(this, new ModifyRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/DeleteRole", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage DeleteRole(string Login, string Password, int CSRoleID)
        {
            object[] results = this.Invoke("DeleteRole", new object[] {
                        Login,
                        Password,
                        CSRoleID});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void DeleteRoleAsync(string Login, string Password, int CSRoleID)
        {
            this.DeleteRoleAsync(Login, Password, CSRoleID, null);
        }

        /// <remarks/>
        public void DeleteRoleAsync(string Login, string Password, int CSRoleID, object userState)
        {
            if ((this.DeleteRoleOperationCompleted == null))
            {
                this.DeleteRoleOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteRoleOperationCompleted);
            }
            this.InvokeAsync("DeleteRole", new object[] {
                        Login,
                        Password,
                        CSRoleID}, this.DeleteRoleOperationCompleted, userState);
        }

        private void OnDeleteRoleOperationCompleted(object arg)
        {
            if ((this.DeleteRoleCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteRoleCompleted(this, new DeleteRoleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/ModifyGateService", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage ModifyGateService(
                    string Login,
                    string Password,
                    int GateServiceID,
                    int ServiceID,
                    decimal ProviderProfit,
                    bool ProviderProfitIsFixed,
                    string NumberMask,
                    string NumberRegEx,
                    string GateTemplate,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<decimal> MinPaySum,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<decimal> MaxPaySum,
                    string TestNumber,
                    bool TestModeAvailable,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<System.DateTime> WaitToTime,
                    bool TechnicallyReady,
                    bool JuridicallyReady,
                    bool Enabled,
                    string Comment,
                    string ExtraRegex,
                    string GateServiceInfo,
                    bool EnabledToSend,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<short> TimeZoneID)
        {
            object[] results = this.Invoke("ModifyGateService", new object[] {
                        Login,
                        Password,
                        GateServiceID,
                        ServiceID,
                        ProviderProfit,
                        ProviderProfitIsFixed,
                        NumberMask,
                        NumberRegEx,
                        GateTemplate,
                        MinPaySum,
                        MaxPaySum,
                        TestNumber,
                        TestModeAvailable,
                        WaitToTime,
                        TechnicallyReady,
                        JuridicallyReady,
                        Enabled,
                        Comment,
                        ExtraRegex,
                        GateServiceInfo,
                        EnabledToSend,
                        TimeZoneID});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void ModifyGateServiceAsync(
                    string Login,
                    string Password,
                    int GateServiceID,
                    int ServiceID,
                    decimal ProviderProfit,
                    bool ProviderProfitIsFixed,
                    string NumberMask,
                    string NumberRegEx,
                    string GateTemplate,
                    System.Nullable<decimal> MinPaySum,
                    System.Nullable<decimal> MaxPaySum,
                    string TestNumber,
                    bool TestModeAvailable,
                    System.Nullable<System.DateTime> WaitToTime,
                    bool TechnicallyReady,
                    bool JuridicallyReady,
                    bool Enabled,
                    string Comment,
                    string ExtraRegex,
                    string GateServiceInfo,
                    bool EnabledToSend,
                    System.Nullable<short> TimeZoneID)
        {
            this.ModifyGateServiceAsync(Login, Password, GateServiceID, ServiceID, ProviderProfit, ProviderProfitIsFixed, NumberMask, NumberRegEx, GateTemplate, MinPaySum, MaxPaySum, TestNumber, TestModeAvailable, WaitToTime, TechnicallyReady, JuridicallyReady, Enabled, Comment, ExtraRegex, GateServiceInfo, EnabledToSend, TimeZoneID, null);
        }

        /// <remarks/>
        public void ModifyGateServiceAsync(
                    string Login,
                    string Password,
                    int GateServiceID,
                    int ServiceID,
                    decimal ProviderProfit,
                    bool ProviderProfitIsFixed,
                    string NumberMask,
                    string NumberRegEx,
                    string GateTemplate,
                    System.Nullable<decimal> MinPaySum,
                    System.Nullable<decimal> MaxPaySum,
                    string TestNumber,
                    bool TestModeAvailable,
                    System.Nullable<System.DateTime> WaitToTime,
                    bool TechnicallyReady,
                    bool JuridicallyReady,
                    bool Enabled,
                    string Comment,
                    string ExtraRegex,
                    string GateServiceInfo,
                    bool EnabledToSend,
                    System.Nullable<short> TimeZoneID,
                    object userState)
        {
            if ((this.ModifyGateServiceOperationCompleted == null))
            {
                this.ModifyGateServiceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyGateServiceOperationCompleted);
            }
            this.InvokeAsync("ModifyGateService", new object[] {
                        Login,
                        Password,
                        GateServiceID,
                        ServiceID,
                        ProviderProfit,
                        ProviderProfitIsFixed,
                        NumberMask,
                        NumberRegEx,
                        GateTemplate,
                        MinPaySum,
                        MaxPaySum,
                        TestNumber,
                        TestModeAvailable,
                        WaitToTime,
                        TechnicallyReady,
                        JuridicallyReady,
                        Enabled,
                        Comment,
                        ExtraRegex,
                        GateServiceInfo,
                        EnabledToSend,
                        TimeZoneID}, this.ModifyGateServiceOperationCompleted, userState);
        }

        private void OnModifyGateServiceOperationCompleted(object arg)
        {
            if ((this.ModifyGateServiceCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyGateServiceCompleted(this, new ModifyGateServiceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/CreateProtocol", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage CreateProtocol(
                    string Login,
                    string Password,
                    int ProtocolID,
                    string ProtocolName,
                    int ProtocolType,
                    int MaxPoolCapacity,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> TopPayments,
                    bool Enabled,
                    string Comment,
                    string DllName,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<byte> SendOrderBy,
                    bool EnabledToSend,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> GetPaymentsPeriod,
                    string DllConfigPath,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> PingPeriod,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> CancelPeriod,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> GetBalancePeriod,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> PaymentControlPeriod,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> MaxPaymentLifetime,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> SessionActionPeriod,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<bool> IsDefaultSslCertValidationNeeded,
                    string NotifyDll)
        {
            object[] results = this.Invoke("CreateProtocol", new object[] {
                        Login,
                        Password,
                        ProtocolID,
                        ProtocolName,
                        ProtocolType,
                        MaxPoolCapacity,
                        TopPayments,
                        Enabled,
                        Comment,
                        DllName,
                        SendOrderBy,
                        EnabledToSend,
                        GetPaymentsPeriod,
                        DllConfigPath,
                        PingPeriod,
                        CancelPeriod,
                        GetBalancePeriod,
                        PaymentControlPeriod,
                        MaxPaymentLifetime,
                        SessionActionPeriod,
                        IsDefaultSslCertValidationNeeded,
                        NotifyDll});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void CreateProtocolAsync(
                    string Login,
                    string Password,
                    int ProtocolID,
                    string ProtocolName,
                    int ProtocolType,
                    int MaxPoolCapacity,
                    System.Nullable<int> TopPayments,
                    bool Enabled,
                    string Comment,
                    string DllName,
                    System.Nullable<byte> SendOrderBy,
                    bool EnabledToSend,
                    System.Nullable<int> GetPaymentsPeriod,
                    string DllConfigPath,
                    System.Nullable<int> PingPeriod,
                    System.Nullable<int> CancelPeriod,
                    System.Nullable<int> GetBalancePeriod,
                    System.Nullable<int> PaymentControlPeriod,
                    System.Nullable<int> MaxPaymentLifetime,
                    System.Nullable<int> SessionActionPeriod,
                    System.Nullable<bool> IsDefaultSslCertValidationNeeded,
                    string NotifyDll)
        {
            this.CreateProtocolAsync(Login, Password, ProtocolID, ProtocolName, ProtocolType, MaxPoolCapacity, TopPayments, Enabled, Comment, DllName, SendOrderBy, EnabledToSend, GetPaymentsPeriod, DllConfigPath, PingPeriod, CancelPeriod, GetBalancePeriod, PaymentControlPeriod, MaxPaymentLifetime, SessionActionPeriod, IsDefaultSslCertValidationNeeded, NotifyDll, null);
        }

        /// <remarks/>
        public void CreateProtocolAsync(
                    string Login,
                    string Password,
                    int ProtocolID,
                    string ProtocolName,
                    int ProtocolType,
                    int MaxPoolCapacity,
                    System.Nullable<int> TopPayments,
                    bool Enabled,
                    string Comment,
                    string DllName,
                    System.Nullable<byte> SendOrderBy,
                    bool EnabledToSend,
                    System.Nullable<int> GetPaymentsPeriod,
                    string DllConfigPath,
                    System.Nullable<int> PingPeriod,
                    System.Nullable<int> CancelPeriod,
                    System.Nullable<int> GetBalancePeriod,
                    System.Nullable<int> PaymentControlPeriod,
                    System.Nullable<int> MaxPaymentLifetime,
                    System.Nullable<int> SessionActionPeriod,
                    System.Nullable<bool> IsDefaultSslCertValidationNeeded,
                    string NotifyDll,
                    object userState)
        {
            if ((this.CreateProtocolOperationCompleted == null))
            {
                this.CreateProtocolOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateProtocolOperationCompleted);
            }
            this.InvokeAsync("CreateProtocol", new object[] {
                        Login,
                        Password,
                        ProtocolID,
                        ProtocolName,
                        ProtocolType,
                        MaxPoolCapacity,
                        TopPayments,
                        Enabled,
                        Comment,
                        DllName,
                        SendOrderBy,
                        EnabledToSend,
                        GetPaymentsPeriod,
                        DllConfigPath,
                        PingPeriod,
                        CancelPeriod,
                        GetBalancePeriod,
                        PaymentControlPeriod,
                        MaxPaymentLifetime,
                        SessionActionPeriod,
                        IsDefaultSslCertValidationNeeded,
                        NotifyDll}, this.CreateProtocolOperationCompleted, userState);
        }

        private void OnCreateProtocolOperationCompleted(object arg)
        {
            if ((this.CreateProtocolCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateProtocolCompleted(this, new CreateProtocolCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/ModifyProtocol", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage ModifyProtocol(
                    string Login,
                    string Password,
                    int ProtocolID,
                    string ProtocolName,
                    int ProtocolType,
                    int MaxPoolCapacity,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> TopPayments,
                    bool Enabled,
                    string Comment,
                    string DllName,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<byte> SendOrderBy,
                    bool EnabledToSend,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> GetPaymentsPeriod,
                    string DllConfigPath,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> PingPeriod,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> CancelPeriod,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> GetBalancePeriod,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> PaymentControlPeriod,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> MaxPaymentLifetime,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> SessionActionPeriod,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<bool> IsDefaultSslCertValidationNeeded,
                    string NotifyDll)
        {
            object[] results = this.Invoke("ModifyProtocol", new object[] {
                        Login,
                        Password,
                        ProtocolID,
                        ProtocolName,
                        ProtocolType,
                        MaxPoolCapacity,
                        TopPayments,
                        Enabled,
                        Comment,
                        DllName,
                        SendOrderBy,
                        EnabledToSend,
                        GetPaymentsPeriod,
                        DllConfigPath,
                        PingPeriod,
                        CancelPeriod,
                        GetBalancePeriod,
                        PaymentControlPeriod,
                        MaxPaymentLifetime,
                        SessionActionPeriod,
                        IsDefaultSslCertValidationNeeded,
                        NotifyDll});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void ModifyProtocolAsync(
                    string Login,
                    string Password,
                    int ProtocolID,
                    string ProtocolName,
                    int ProtocolType,
                    int MaxPoolCapacity,
                    System.Nullable<int> TopPayments,
                    bool Enabled,
                    string Comment,
                    string DllName,
                    System.Nullable<byte> SendOrderBy,
                    bool EnabledToSend,
                    System.Nullable<int> GetPaymentsPeriod,
                    string DllConfigPath,
                    System.Nullable<int> PingPeriod,
                    System.Nullable<int> CancelPeriod,
                    System.Nullable<int> GetBalancePeriod,
                    System.Nullable<int> PaymentControlPeriod,
                    System.Nullable<int> MaxPaymentLifetime,
                    System.Nullable<int> SessionActionPeriod,
                    System.Nullable<bool> IsDefaultSslCertValidationNeeded,
                    string NotifyDll)
        {
            this.ModifyProtocolAsync(Login, Password, ProtocolID, ProtocolName, ProtocolType, MaxPoolCapacity, TopPayments, Enabled, Comment, DllName, SendOrderBy, EnabledToSend, GetPaymentsPeriod, DllConfigPath, PingPeriod, CancelPeriod, GetBalancePeriod, PaymentControlPeriod, MaxPaymentLifetime, SessionActionPeriod, IsDefaultSslCertValidationNeeded, NotifyDll, null);
        }

        /// <remarks/>
        public void ModifyProtocolAsync(
                    string Login,
                    string Password,
                    int ProtocolID,
                    string ProtocolName,
                    int ProtocolType,
                    int MaxPoolCapacity,
                    System.Nullable<int> TopPayments,
                    bool Enabled,
                    string Comment,
                    string DllName,
                    System.Nullable<byte> SendOrderBy,
                    bool EnabledToSend,
                    System.Nullable<int> GetPaymentsPeriod,
                    string DllConfigPath,
                    System.Nullable<int> PingPeriod,
                    System.Nullable<int> CancelPeriod,
                    System.Nullable<int> GetBalancePeriod,
                    System.Nullable<int> PaymentControlPeriod,
                    System.Nullable<int> MaxPaymentLifetime,
                    System.Nullable<int> SessionActionPeriod,
                    System.Nullable<bool> IsDefaultSslCertValidationNeeded,
                    string NotifyDll,
                    object userState)
        {
            if ((this.ModifyProtocolOperationCompleted == null))
            {
                this.ModifyProtocolOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyProtocolOperationCompleted);
            }
            this.InvokeAsync("ModifyProtocol", new object[] {
                        Login,
                        Password,
                        ProtocolID,
                        ProtocolName,
                        ProtocolType,
                        MaxPoolCapacity,
                        TopPayments,
                        Enabled,
                        Comment,
                        DllName,
                        SendOrderBy,
                        EnabledToSend,
                        GetPaymentsPeriod,
                        DllConfigPath,
                        PingPeriod,
                        CancelPeriod,
                        GetBalancePeriod,
                        PaymentControlPeriod,
                        MaxPaymentLifetime,
                        SessionActionPeriod,
                        IsDefaultSslCertValidationNeeded,
                        NotifyDll}, this.ModifyProtocolOperationCompleted, userState);
        }

        private void OnModifyProtocolOperationCompleted(object arg)
        {
            if ((this.ModifyProtocolCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyProtocolCompleted(this, new ModifyProtocolCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/CreateGate", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage CreateGate(
                    string Login,
                    string Password,
                    int ProtocolID,
                    string GateName,
                    int GateType,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> ConcentratorID,
                    string Address,
                    string UserName,
                    string GatePassword,
                    string CertificatePath,
                    string CertificatePassword,
                    bool TestModeAvailable,
                    bool Enabled,
                    string GateInfo,
                    string Comment,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> MaxOnLineConnect,
                    string OutgoingIP,
                    bool EnabledToSend,
                    string Domain,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> MaxThreads,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> TopPayments,
                    bool NeedBalance,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> TopExpiredSessions,
                    bool NeedCloseSessions,
                    bool EnablePing)
        {
            object[] results = this.Invoke("CreateGate", new object[] {
                        Login,
                        Password,
                        ProtocolID,
                        GateName,
                        GateType,
                        ConcentratorID,
                        Address,
                        UserName,
                        GatePassword,
                        CertificatePath,
                        CertificatePassword,
                        TestModeAvailable,
                        Enabled,
                        GateInfo,
                        Comment,
                        MaxOnLineConnect,
                        OutgoingIP,
                        EnabledToSend,
                        Domain,
                        MaxThreads,
                        TopPayments,
                        NeedBalance,
                        TopExpiredSessions,
                        NeedCloseSessions,
                        EnablePing});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void CreateGateAsync(
                    string Login,
                    string Password,
                    int ProtocolID,
                    string GateName,
                    int GateType,
                    System.Nullable<int> ConcentratorID,
                    string Address,
                    string UserName,
                    string GatePassword,
                    string CertificatePath,
                    string CertificatePassword,
                    bool TestModeAvailable,
                    bool Enabled,
                    string GateInfo,
                    string Comment,
                    System.Nullable<int> MaxOnLineConnect,
                    string OutgoingIP,
                    bool EnabledToSend,
                    string Domain,
                    System.Nullable<int> MaxThreads,
                    System.Nullable<int> TopPayments,
                    bool NeedBalance,
                    System.Nullable<int> TopExpiredSessions,
                    bool NeedCloseSessions,
                    bool EnablePing)
        {
            this.CreateGateAsync(Login, Password, ProtocolID, GateName, GateType, ConcentratorID, Address, UserName, GatePassword, CertificatePath, CertificatePassword, TestModeAvailable, Enabled, GateInfo, Comment, MaxOnLineConnect, OutgoingIP, EnabledToSend, Domain, MaxThreads, TopPayments, NeedBalance, TopExpiredSessions, NeedCloseSessions, EnablePing, null);
        }

        /// <remarks/>
        public void CreateGateAsync(
                    string Login,
                    string Password,
                    int ProtocolID,
                    string GateName,
                    int GateType,
                    System.Nullable<int> ConcentratorID,
                    string Address,
                    string UserName,
                    string GatePassword,
                    string CertificatePath,
                    string CertificatePassword,
                    bool TestModeAvailable,
                    bool Enabled,
                    string GateInfo,
                    string Comment,
                    System.Nullable<int> MaxOnLineConnect,
                    string OutgoingIP,
                    bool EnabledToSend,
                    string Domain,
                    System.Nullable<int> MaxThreads,
                    System.Nullable<int> TopPayments,
                    bool NeedBalance,
                    System.Nullable<int> TopExpiredSessions,
                    bool NeedCloseSessions,
                    bool EnablePing,
                    object userState)
        {
            if ((this.CreateGateOperationCompleted == null))
            {
                this.CreateGateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateGateOperationCompleted);
            }
            this.InvokeAsync("CreateGate", new object[] {
                        Login,
                        Password,
                        ProtocolID,
                        GateName,
                        GateType,
                        ConcentratorID,
                        Address,
                        UserName,
                        GatePassword,
                        CertificatePath,
                        CertificatePassword,
                        TestModeAvailable,
                        Enabled,
                        GateInfo,
                        Comment,
                        MaxOnLineConnect,
                        OutgoingIP,
                        EnabledToSend,
                        Domain,
                        MaxThreads,
                        TopPayments,
                        NeedBalance,
                        TopExpiredSessions,
                        NeedCloseSessions,
                        EnablePing}, this.CreateGateOperationCompleted, userState);
        }

        private void OnCreateGateOperationCompleted(object arg)
        {
            if ((this.CreateGateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateGateCompleted(this, new CreateGateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/ModifyGate", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage ModifyGate(
                    string Login,
                    string Password,
                    int GateID,
                    int ProtocolID,
                    string GateName,
                    int GateType,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> ConcentratorID,
                    string Address,
                    string UserName,
                    string GatePassword,
                    string CertificatePath,
                    string CertificatePassword,
                    bool TestModeAvailable,
                    bool Enabled,
                    string GateInfo,
                    string Comment,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> MaxOnLineConnect,
                    string OutgoingIP,
                    bool EnabledToSend,
                    string Domain,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> MaxThreads,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> TopPayments,
                    bool NeedBalance,
                    [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> TopExpiredSessions,
                    bool NeedCloseSessions,
                    bool EnablePing)
        {
            object[] results = this.Invoke("ModifyGate", new object[] {
                        Login,
                        Password,
                        GateID,
                        ProtocolID,
                        GateName,
                        GateType,
                        ConcentratorID,
                        Address,
                        UserName,
                        GatePassword,
                        CertificatePath,
                        CertificatePassword,
                        TestModeAvailable,
                        Enabled,
                        GateInfo,
                        Comment,
                        MaxOnLineConnect,
                        OutgoingIP,
                        EnabledToSend,
                        Domain,
                        MaxThreads,
                        TopPayments,
                        NeedBalance,
                        TopExpiredSessions,
                        NeedCloseSessions,
                        EnablePing});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void ModifyGateAsync(
                    string Login,
                    string Password,
                    int GateID,
                    int ProtocolID,
                    string GateName,
                    int GateType,
                    System.Nullable<int> ConcentratorID,
                    string Address,
                    string UserName,
                    string GatePassword,
                    string CertificatePath,
                    string CertificatePassword,
                    bool TestModeAvailable,
                    bool Enabled,
                    string GateInfo,
                    string Comment,
                    System.Nullable<int> MaxOnLineConnect,
                    string OutgoingIP,
                    bool EnabledToSend,
                    string Domain,
                    System.Nullable<int> MaxThreads,
                    System.Nullable<int> TopPayments,
                    bool NeedBalance,
                    System.Nullable<int> TopExpiredSessions,
                    bool NeedCloseSessions,
                    bool EnablePing)
        {
            this.ModifyGateAsync(Login, Password, GateID, ProtocolID, GateName, GateType, ConcentratorID, Address, UserName, GatePassword, CertificatePath, CertificatePassword, TestModeAvailable, Enabled, GateInfo, Comment, MaxOnLineConnect, OutgoingIP, EnabledToSend, Domain, MaxThreads, TopPayments, NeedBalance, TopExpiredSessions, NeedCloseSessions, EnablePing, null);
        }

        /// <remarks/>
        public void ModifyGateAsync(
                    string Login,
                    string Password,
                    int GateID,
                    int ProtocolID,
                    string GateName,
                    int GateType,
                    System.Nullable<int> ConcentratorID,
                    string Address,
                    string UserName,
                    string GatePassword,
                    string CertificatePath,
                    string CertificatePassword,
                    bool TestModeAvailable,
                    bool Enabled,
                    string GateInfo,
                    string Comment,
                    System.Nullable<int> MaxOnLineConnect,
                    string OutgoingIP,
                    bool EnabledToSend,
                    string Domain,
                    System.Nullable<int> MaxThreads,
                    System.Nullable<int> TopPayments,
                    bool NeedBalance,
                    System.Nullable<int> TopExpiredSessions,
                    bool NeedCloseSessions,
                    bool EnablePing,
                    object userState)
        {
            if ((this.ModifyGateOperationCompleted == null))
            {
                this.ModifyGateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyGateOperationCompleted);
            }
            this.InvokeAsync("ModifyGate", new object[] {
                        Login,
                        Password,
                        GateID,
                        ProtocolID,
                        GateName,
                        GateType,
                        ConcentratorID,
                        Address,
                        UserName,
                        GatePassword,
                        CertificatePath,
                        CertificatePassword,
                        TestModeAvailable,
                        Enabled,
                        GateInfo,
                        Comment,
                        MaxOnLineConnect,
                        OutgoingIP,
                        EnabledToSend,
                        Domain,
                        MaxThreads,
                        TopPayments,
                        NeedBalance,
                        TopExpiredSessions,
                        NeedCloseSessions,
                        EnablePing}, this.ModifyGateOperationCompleted, userState);
        }

        private void OnModifyGateOperationCompleted(object arg)
        {
            if ((this.ModifyGateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyGateCompleted(this, new ModifyGateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/CreateProvider", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage CreateProvider(string Login, string Password, string ProviderName, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> ProviderGroupID, bool Enabled, string Comment)
        {
            object[] results = this.Invoke("CreateProvider", new object[] {
                        Login,
                        Password,
                        ProviderName,
                        ProviderGroupID,
                        Enabled,
                        Comment});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void CreateProviderAsync(string Login, string Password, string ProviderName, System.Nullable<int> ProviderGroupID, bool Enabled, string Comment)
        {
            this.CreateProviderAsync(Login, Password, ProviderName, ProviderGroupID, Enabled, Comment, null);
        }

        /// <remarks/>
        public void CreateProviderAsync(string Login, string Password, string ProviderName, System.Nullable<int> ProviderGroupID, bool Enabled, string Comment, object userState)
        {
            if ((this.CreateProviderOperationCompleted == null))
            {
                this.CreateProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateProviderOperationCompleted);
            }
            this.InvokeAsync("CreateProvider", new object[] {
                        Login,
                        Password,
                        ProviderName,
                        ProviderGroupID,
                        Enabled,
                        Comment}, this.CreateProviderOperationCompleted, userState);
        }

        private void OnCreateProviderOperationCompleted(object arg)
        {
            if ((this.CreateProviderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateProviderCompleted(this, new CreateProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/ModifyProvider", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage ModifyProvider(string Login, string Password, int ProviderID, string ProviderName, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<int> ProviderGroupID, bool Enabled, string Comment)
        {
            object[] results = this.Invoke("ModifyProvider", new object[] {
                        Login,
                        Password,
                        ProviderID,
                        ProviderName,
                        ProviderGroupID,
                        Enabled,
                        Comment});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void ModifyProviderAsync(string Login, string Password, int ProviderID, string ProviderName, System.Nullable<int> ProviderGroupID, bool Enabled, string Comment)
        {
            this.ModifyProviderAsync(Login, Password, ProviderID, ProviderName, ProviderGroupID, Enabled, Comment, null);
        }

        /// <remarks/>
        public void ModifyProviderAsync(string Login, string Password, int ProviderID, string ProviderName, System.Nullable<int> ProviderGroupID, bool Enabled, string Comment, object userState)
        {
            if ((this.ModifyProviderOperationCompleted == null))
            {
                this.ModifyProviderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnModifyProviderOperationCompleted);
            }
            this.InvokeAsync("ModifyProvider", new object[] {
                        Login,
                        Password,
                        ProviderID,
                        ProviderName,
                        ProviderGroupID,
                        Enabled,
                        Comment}, this.ModifyProviderOperationCompleted, userState);
        }

        private void OnModifyProviderOperationCompleted(object arg)
        {
            if ((this.ModifyProviderCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ModifyProviderCompleted(this, new ModifyProviderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/DBInfo", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage DBInfo(string Login, string Password)
        {
            object[] results = this.Invoke("DBInfo", new object[] {
                        Login,
                        Password});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void DBInfoAsync(string Login, string Password)
        {
            this.DBInfoAsync(Login, Password, null);
        }

        /// <remarks/>
        public void DBInfoAsync(string Login, string Password, object userState)
        {
            if ((this.DBInfoOperationCompleted == null))
            {
                this.DBInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDBInfoOperationCompleted);
            }
            this.InvokeAsync("DBInfo", new object[] {
                        Login,
                        Password}, this.DBInfoOperationCompleted, userState);
        }

        private void OnDBInfoOperationCompleted(object arg)
        {
            if ((this.DBInfoCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DBInfoCompleted(this, new DBInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/User_Authorization", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage User_Authorization(string Login, string Password)
        {
            object[] results = this.Invoke("User_Authorization", new object[] {
                        Login,
                        Password});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void User_AuthorizationAsync(string Login, string Password)
        {
            this.User_AuthorizationAsync(Login, Password, null);
        }

        /// <remarks/>
        public void User_AuthorizationAsync(string Login, string Password, object userState)
        {
            if ((this.User_AuthorizationOperationCompleted == null))
            {
                this.User_AuthorizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUser_AuthorizationOperationCompleted);
            }
            this.InvokeAsync("User_Authorization", new object[] {
                        Login,
                        Password}, this.User_AuthorizationOperationCompleted, userState);
        }

        private void OnUser_AuthorizationOperationCompleted(object arg)
        {
            if ((this.User_AuthorizationCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.User_AuthorizationCompleted(this, new User_AuthorizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/Admin_GetUsersList", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage Admin_GetUsersList(string Login, string Password, int CSUserID)
        {
            object[] results = this.Invoke("Admin_GetUsersList", new object[] {
                        Login,
                        Password,
                        CSUserID});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void Admin_GetUsersListAsync(string Login, string Password, int CSUserID)
        {
            this.Admin_GetUsersListAsync(Login, Password, CSUserID, null);
        }

        /// <remarks/>
        public void Admin_GetUsersListAsync(string Login, string Password, int CSUserID, object userState)
        {
            if ((this.Admin_GetUsersListOperationCompleted == null))
            {
                this.Admin_GetUsersListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdmin_GetUsersListOperationCompleted);
            }
            this.InvokeAsync("Admin_GetUsersList", new object[] {
                        Login,
                        Password,
                        CSUserID}, this.Admin_GetUsersListOperationCompleted, userState);
        }

        private void OnAdmin_GetUsersListOperationCompleted(object arg)
        {
            if ((this.Admin_GetUsersListCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Admin_GetUsersListCompleted(this, new Admin_GetUsersListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/Admin_GetRoleList", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage Admin_GetRoleList(string Login, string Password)
        {
            object[] results = this.Invoke("Admin_GetRoleList", new object[] {
                        Login,
                        Password});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void Admin_GetRoleListAsync(string Login, string Password)
        {
            this.Admin_GetRoleListAsync(Login, Password, null);
        }

        /// <remarks/>
        public void Admin_GetRoleListAsync(string Login, string Password, object userState)
        {
            if ((this.Admin_GetRoleListOperationCompleted == null))
            {
                this.Admin_GetRoleListOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdmin_GetRoleListOperationCompleted);
            }
            this.InvokeAsync("Admin_GetRoleList", new object[] {
                        Login,
                        Password}, this.Admin_GetRoleListOperationCompleted, userState);
        }

        private void OnAdmin_GetRoleListOperationCompleted(object arg)
        {
            if ((this.Admin_GetRoleListCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Admin_GetRoleListCompleted(this, new Admin_GetRoleListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/Admin_CreateUser", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage Admin_CreateUser(string Login, string Password, string UserLogin, string UserPassword, byte UserCSRoleID, string UserFIO, string UserEmail, string SystemName, bool Enabled)
        {
            object[] results = this.Invoke("Admin_CreateUser", new object[] {
                        Login,
                        Password,
                        UserLogin,
                        UserPassword,
                        UserCSRoleID,
                        UserFIO,
                        UserEmail,
                        SystemName,
                        Enabled});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void Admin_CreateUserAsync(string Login, string Password, string UserLogin, string UserPassword, byte UserCSRoleID, string UserFIO, string UserEmail, string SystemName, bool Enabled)
        {
            this.Admin_CreateUserAsync(Login, Password, UserLogin, UserPassword, UserCSRoleID, UserFIO, UserEmail, SystemName, Enabled, null);
        }

        /// <remarks/>
        public void Admin_CreateUserAsync(string Login, string Password, string UserLogin, string UserPassword, byte UserCSRoleID, string UserFIO, string UserEmail, string SystemName, bool Enabled, object userState)
        {
            if ((this.Admin_CreateUserOperationCompleted == null))
            {
                this.Admin_CreateUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdmin_CreateUserOperationCompleted);
            }
            this.InvokeAsync("Admin_CreateUser", new object[] {
                        Login,
                        Password,
                        UserLogin,
                        UserPassword,
                        UserCSRoleID,
                        UserFIO,
                        UserEmail,
                        SystemName,
                        Enabled}, this.Admin_CreateUserOperationCompleted, userState);
        }

        private void OnAdmin_CreateUserOperationCompleted(object arg)
        {
            if ((this.Admin_CreateUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Admin_CreateUserCompleted(this, new Admin_CreateUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/Admin_ModifyUser", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage Admin_ModifyUser(string Login, string Password, int CSUserID, byte CSRoleID, string UserLogin, string UserPassword, string UserFIO, string UserEmail, bool Enabled, string SystemName)
        {
            object[] results = this.Invoke("Admin_ModifyUser", new object[] {
                        Login,
                        Password,
                        CSUserID,
                        CSRoleID,
                        UserLogin,
                        UserPassword,
                        UserFIO,
                        UserEmail,
                        Enabled,
                        SystemName});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void Admin_ModifyUserAsync(string Login, string Password, int CSUserID, byte CSRoleID, string UserLogin, string UserPassword, string UserFIO, string UserEmail, bool Enabled, string SystemName)
        {
            this.Admin_ModifyUserAsync(Login, Password, CSUserID, CSRoleID, UserLogin, UserPassword, UserFIO, UserEmail, Enabled, SystemName, null);
        }

        /// <remarks/>
        public void Admin_ModifyUserAsync(string Login, string Password, int CSUserID, byte CSRoleID, string UserLogin, string UserPassword, string UserFIO, string UserEmail, bool Enabled, string SystemName, object userState)
        {
            if ((this.Admin_ModifyUserOperationCompleted == null))
            {
                this.Admin_ModifyUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAdmin_ModifyUserOperationCompleted);
            }
            this.InvokeAsync("Admin_ModifyUser", new object[] {
                        Login,
                        Password,
                        CSUserID,
                        CSRoleID,
                        UserLogin,
                        UserPassword,
                        UserFIO,
                        UserEmail,
                        Enabled,
                        SystemName}, this.Admin_ModifyUserOperationCompleted, userState);
        }

        private void OnAdmin_ModifyUserOperationCompleted(object arg)
        {
            if ((this.Admin_ModifyUserCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Admin_ModifyUserCompleted(this, new Admin_ModifyUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/Info_UPG_GetStorage", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage Info_UPG_GetStorage(string Login, string Password)
        {
            object[] results = this.Invoke("Info_UPG_GetStorage", new object[] {
                        Login,
                        Password});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void Info_UPG_GetStorageAsync(string Login, string Password)
        {
            this.Info_UPG_GetStorageAsync(Login, Password, null);
        }

        /// <remarks/>
        public void Info_UPG_GetStorageAsync(string Login, string Password, object userState)
        {
            if ((this.Info_UPG_GetStorageOperationCompleted == null))
            {
                this.Info_UPG_GetStorageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInfo_UPG_GetStorageOperationCompleted);
            }
            this.InvokeAsync("Info_UPG_GetStorage", new object[] {
                        Login,
                        Password}, this.Info_UPG_GetStorageOperationCompleted, userState);
        }

        private void OnInfo_UPG_GetStorageOperationCompleted(object arg)
        {
            if ((this.Info_UPG_GetStorageCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.Info_UPG_GetStorageCompleted(this, new Info_UPG_GetStorageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/GetAllTables", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage GetAllTables(string Login, string Password)
        {
            object[] results = this.Invoke("GetAllTables", new object[] {
                        Login,
                        Password});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void GetAllTablesAsync(string Login, string Password)
        {
            this.GetAllTablesAsync(Login, Password, null);
        }

        /// <remarks/>
        public void GetAllTablesAsync(string Login, string Password, object userState)
        {
            if ((this.GetAllTablesOperationCompleted == null))
            {
                this.GetAllTablesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllTablesOperationCompleted);
            }
            this.InvokeAsync("GetAllTables", new object[] {
                        Login,
                        Password}, this.GetAllTablesOperationCompleted, userState);
        }

        private void OnGetAllTablesOperationCompleted(object arg)
        {
            if ((this.GetAllTablesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllTablesCompleted(this, new GetAllTablesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/GetAllowedTables", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage GetAllowedTables(string Login, string Password)
        {
            object[] results = this.Invoke("GetAllowedTables", new object[] {
                        Login,
                        Password});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void GetAllowedTablesAsync(string Login, string Password)
        {
            this.GetAllowedTablesAsync(Login, Password, null);
        }

        /// <remarks/>
        public void GetAllowedTablesAsync(string Login, string Password, object userState)
        {
            if ((this.GetAllowedTablesOperationCompleted == null))
            {
                this.GetAllowedTablesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetAllowedTablesOperationCompleted);
            }
            this.InvokeAsync("GetAllowedTables", new object[] {
                        Login,
                        Password}, this.GetAllowedTablesOperationCompleted, userState);
        }

        private void OnGetAllowedTablesOperationCompleted(object arg)
        {
            if ((this.GetAllowedTablesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetAllowedTablesCompleted(this, new GetAllowedTablesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/GetTableEx", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage GetTableEx(string Login, string Password, string tableName, int top, string inputXml)
        {
            object[] results = this.Invoke("GetTableEx", new object[] {
                        Login,
                        Password,
                        tableName,
                        top,
                        inputXml});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void GetTableExAsync(string Login, string Password, string tableName, int top, string inputXml)
        {
            this.GetTableExAsync(Login, Password, tableName, top, inputXml, null);
        }

        /// <remarks/>
        public void GetTableExAsync(string Login, string Password, string tableName, int top, string inputXml, object userState)
        {
            if ((this.GetTableExOperationCompleted == null))
            {
                this.GetTableExOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTableExOperationCompleted);
            }
            this.InvokeAsync("GetTableEx", new object[] {
                        Login,
                        Password,
                        tableName,
                        top,
                        inputXml}, this.GetTableExOperationCompleted, userState);
        }

        private void OnGetTableExOperationCompleted(object arg)
        {
            if ((this.GetTableExCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTableExCompleted(this, new GetTableExCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/GetPaymentsQueues", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage GetPaymentsQueues(string Login, string Password)
        {
            object[] results = this.Invoke("GetPaymentsQueues", new object[] {
                        Login,
                        Password});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void GetPaymentsQueuesAsync(string Login, string Password)
        {
            this.GetPaymentsQueuesAsync(Login, Password, null);
        }

        /// <remarks/>
        public void GetPaymentsQueuesAsync(string Login, string Password, object userState)
        {
            if ((this.GetPaymentsQueuesOperationCompleted == null))
            {
                this.GetPaymentsQueuesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPaymentsQueuesOperationCompleted);
            }
            this.InvokeAsync("GetPaymentsQueues", new object[] {
                        Login,
                        Password}, this.GetPaymentsQueuesOperationCompleted, userState);
        }

        private void OnGetPaymentsQueuesOperationCompleted(object arg)
        {
            if ((this.GetPaymentsQueuesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPaymentsQueuesCompleted(this, new GetPaymentsQueuesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://osmp.ru/GetTable", RequestNamespace = "http://osmp.ru/", ResponseNamespace = "http://osmp.ru/", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ReturnMessage GetTable(string Login, string Password, string tableName, [System.Xml.Serialization.XmlElementAttribute(IsNullable = true)] System.Nullable<long> PrimaryId)
        {
            object[] results = this.Invoke("GetTable", new object[] {
                        Login,
                        Password,
                        tableName,
                        PrimaryId});
            return ((ReturnMessage)(results[0]));
        }

        /// <remarks/>
        public void GetTableAsync(string Login, string Password, string tableName, System.Nullable<long> PrimaryId)
        {
            this.GetTableAsync(Login, Password, tableName, PrimaryId, null);
        }

        /// <remarks/>
        public void GetTableAsync(string Login, string Password, string tableName, System.Nullable<long> PrimaryId, object userState)
        {
            if ((this.GetTableOperationCompleted == null))
            {
                this.GetTableOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetTableOperationCompleted);
            }
            this.InvokeAsync("GetTable", new object[] {
                        Login,
                        Password,
                        tableName,
                        PrimaryId}, this.GetTableOperationCompleted, userState);
        }

        private void OnGetTableOperationCompleted(object arg)
        {
            if ((this.GetTableCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetTableCompleted(this, new GetTableCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        public new void CancelAsync(object userState)
        {
            base.CancelAsync(userState);
        }

        private bool IsLocalFileSystemWebService(string url)
        {
            if (((url == null)
                        || (url == string.Empty)))
            {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024)
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0)))
            {
                return true;
            }
            return false;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.17626")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace = "http://osmp.ru/")]
    public partial class ReturnMessage
    {

        private string nameField;

        private int errorField;

        private string dataField;

        private System.Data.DataSet setOfDataField;

        /// <remarks/>
        public string Name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }

        /// <remarks/>
        public int Error
        {
            get
            {
                return this.errorField;
            }
            set
            {
                this.errorField = value;
            }
        }

        /// <remarks/>
        public string Data
        {
            get
            {
                return this.dataField;
            }
            set
            {
                this.dataField = value;
            }
        }

        /// <remarks/>
        public System.Data.DataSet SetOfData
        {
            get
            {
                return this.setOfDataField;
            }
            set
            {
                this.setOfDataField = value;
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ModifyPaymentCompletedEventHandler(object sender, ModifyPaymentCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyPaymentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ModifyPaymentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetLogsCompletedEventHandler(object sender, GetLogsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLogsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetLogsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetPinCardsCompletedEventHandler(object sender, GetPinCardsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPinCardsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPinCardsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetAvailablePinCardsCompletedEventHandler(object sender, GetAvailablePinCardsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAvailablePinCardsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAvailablePinCardsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetPaymentsCompletedEventHandler(object sender, GetPaymentsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPaymentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPaymentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetErrorsCompletedEventHandler(object sender, GetErrorsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetErrorsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetErrorsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetUPGServicesCompletedEventHandler(object sender, GetUPGServicesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUPGServicesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetUPGServicesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void UPGServiceStopperCompletedEventHandler(object sender, UPGServiceStopperCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UPGServiceStopperCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UPGServiceStopperCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void UPGServiceStarterCompletedEventHandler(object sender, UPGServiceStarterCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UPGServiceStarterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal UPGServiceStarterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetErrorLogCompletedEventHandler(object sender, GetErrorLogCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetErrorLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetErrorLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetPinCardCompletedEventHandler(object sender, GetPinCardCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPinCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPinCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CreatePinCardTemplateCompletedEventHandler(object sender, CreatePinCardTemplateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreatePinCardTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreatePinCardTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CreatePinCardsCompletedEventHandler(object sender, CreatePinCardsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreatePinCardsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreatePinCardsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ModifyPinCardCompletedEventHandler(object sender, ModifyPinCardCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyPinCardCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ModifyPinCardCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetPinCardTemplateCompletedEventHandler(object sender, GetPinCardTemplateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPinCardTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPinCardTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ModifyPinCardTemplateCompletedEventHandler(object sender, ModifyPinCardTemplateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyPinCardTemplateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ModifyPinCardTemplateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CreatePinProductionCompletedEventHandler(object sender, CreatePinProductionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreatePinProductionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreatePinProductionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CreatePinCardNominalCompletedEventHandler(object sender, CreatePinCardNominalCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreatePinCardNominalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreatePinCardNominalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetUserPermissionsCompletedEventHandler(object sender, GetUserPermissionsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetUserPermissionsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetUserPermissionsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CreateOsmpCodeCompletedEventHandler(object sender, CreateOsmpCodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateOsmpCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateOsmpCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ModifyOsmpCodeCompletedEventHandler(object sender, ModifyOsmpCodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyOsmpCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ModifyOsmpCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void DeleteOsmpCodeCompletedEventHandler(object sender, DeleteOsmpCodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteOsmpCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteOsmpCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CreateServiceFixedAmountCompletedEventHandler(object sender, CreateServiceFixedAmountCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateServiceFixedAmountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateServiceFixedAmountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void DeleteServiceFixedAmountCompletedEventHandler(object sender, DeleteServiceFixedAmountCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteServiceFixedAmountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteServiceFixedAmountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CreateTimeZoneCompletedEventHandler(object sender, CreateTimeZoneCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateTimeZoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateTimeZoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ModifyTimeZoneCompletedEventHandler(object sender, ModifyTimeZoneCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyTimeZoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ModifyTimeZoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void DeleteTimeZoneCompletedEventHandler(object sender, DeleteTimeZoneCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteTimeZoneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteTimeZoneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CreateTimeZoneBindingCompletedEventHandler(object sender, CreateTimeZoneBindingCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateTimeZoneBindingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateTimeZoneBindingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ModifyTimeZoneBindingCompletedEventHandler(object sender, ModifyTimeZoneBindingCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyTimeZoneBindingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ModifyTimeZoneBindingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void DeleteTimeZoneBindingCompletedEventHandler(object sender, DeleteTimeZoneBindingCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteTimeZoneBindingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteTimeZoneBindingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CreateGateServiceCounterCompletedEventHandler(object sender, CreateGateServiceCounterCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateGateServiceCounterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateGateServiceCounterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ModifyGateServiceCounterCompletedEventHandler(object sender, ModifyGateServiceCounterCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyGateServiceCounterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ModifyGateServiceCounterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void DeleteGateServiceCounterCompletedEventHandler(object sender, DeleteGateServiceCounterCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteGateServiceCounterCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteGateServiceCounterCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ModifyPinProductionCompletedEventHandler(object sender, ModifyPinProductionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyPinProductionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ModifyPinProductionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ModifyPinCardNominalCompletedEventHandler(object sender, ModifyPinCardNominalCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyPinCardNominalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ModifyPinCardNominalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void FindLogStringCompletedEventHandler(object sender, FindLogStringCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FindLogStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal FindLogStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetEventLogCompletedEventHandler(object sender, GetEventLogCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEventLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetEventLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ClearAsyncCollectionCompletedEventHandler(object sender, ClearAsyncCollectionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ClearAsyncCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ClearAsyncCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CustomThreadsCountCompletedEventHandler(object sender, CustomThreadsCountCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomThreadsCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CustomThreadsCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CustomThreadsFinishCompletedEventHandler(object sender, CustomThreadsFinishCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CustomThreadsFinishCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CustomThreadsFinishCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void DeleteItemFromAsyncCollectionCompletedEventHandler(object sender, DeleteItemFromAsyncCollectionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteItemFromAsyncCollectionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteItemFromAsyncCollectionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ViewPaymentsToSendCompletedEventHandler(object sender, ViewPaymentsToSendCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ViewPaymentsToSendCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ViewPaymentsToSendCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ViewFolderCompletedEventHandler(object sender, ViewFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ViewFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ViewFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetFileCompletedEventHandler(object sender, GetFileCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void DeleteFileCompletedEventHandler(object sender, DeleteFileCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void RenameFileCompletedEventHandler(object sender, RenameFileCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RenameFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RenameFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void RenameFolderCompletedEventHandler(object sender, RenameFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RenameFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal RenameFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void DeleteFolderCompletedEventHandler(object sender, DeleteFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CreateFolderCompletedEventHandler(object sender, CreateFolderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void LoadFileCompletedEventHandler(object sender, LoadFileCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class LoadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal LoadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ApplyGateDllCompletedEventHandler(object sender, ApplyGateDllCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ApplyGateDllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ApplyGateDllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ValidateGateDllCompletedEventHandler(object sender, ValidateGateDllCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ValidateGateDllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ValidateGateDllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetRegisteredProtocolsCompletedEventHandler(object sender, GetRegisteredProtocolsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRegisteredProtocolsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetRegisteredProtocolsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetPaysInPoolCompletedEventHandler(object sender, GetPaysInPoolCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPaysInPoolCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPaysInPoolCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetAsyncDataCompletedEventHandler(object sender, GetAsyncDataCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAsyncDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAsyncDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void DisableAddonsCompletedEventHandler(object sender, DisableAddonsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DisableAddonsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DisableAddonsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void EnableAddonsCompletedEventHandler(object sender, EnableAddonsCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class EnableAddonsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal EnableAddonsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void DomainMonitoringCompletedEventHandler(object sender, DomainMonitoringCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DomainMonitoringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DomainMonitoringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetEventLogNamesCompletedEventHandler(object sender, GetEventLogNamesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetEventLogNamesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetEventLogNamesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetLogTypesCompletedEventHandler(object sender, GetLogTypesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLogTypesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetLogTypesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CreateGateCodeCompletedEventHandler(object sender, CreateGateCodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateGateCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateGateCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ModifyGateCodeCompletedEventHandler(object sender, ModifyGateCodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyGateCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ModifyGateCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void DeleteGateCodeCompletedEventHandler(object sender, DeleteGateCodeCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteGateCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteGateCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void DeleteGateServiceCompletedEventHandler(object sender, DeleteGateServiceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteGateServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteGateServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CreateServiceCompletedEventHandler(object sender, CreateServiceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ModifyServiceCompletedEventHandler(object sender, ModifyServiceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ModifyServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CreateOsmp_ServiceCompletedEventHandler(object sender, CreateOsmp_ServiceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateOsmp_ServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateOsmp_ServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ModifyOsmp_ServiceCompletedEventHandler(object sender, ModifyOsmp_ServiceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyOsmp_ServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ModifyOsmp_ServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GateServiceBindingCompletedEventHandler(object sender, GateServiceBindingCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GateServiceBindingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GateServiceBindingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CreateGateServiceCompletedEventHandler(object sender, CreateGateServiceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateGateServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateGateServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CreatePermissionCompletedEventHandler(object sender, CreatePermissionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreatePermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreatePermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ModifyPermissionCompletedEventHandler(object sender, ModifyPermissionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyPermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ModifyPermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void DeletePermissionCompletedEventHandler(object sender, DeletePermissionCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeletePermissionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeletePermissionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CreateRoleCompletedEventHandler(object sender, CreateRoleCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ModifyRoleCompletedEventHandler(object sender, ModifyRoleCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ModifyRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void DeleteRoleCompletedEventHandler(object sender, DeleteRoleCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteRoleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteRoleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ModifyGateServiceCompletedEventHandler(object sender, ModifyGateServiceCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyGateServiceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ModifyGateServiceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CreateProtocolCompletedEventHandler(object sender, CreateProtocolCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateProtocolCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateProtocolCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ModifyProtocolCompletedEventHandler(object sender, ModifyProtocolCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyProtocolCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ModifyProtocolCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CreateGateCompletedEventHandler(object sender, CreateGateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateGateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateGateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ModifyGateCompletedEventHandler(object sender, ModifyGateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyGateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ModifyGateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void CreateProviderCompletedEventHandler(object sender, CreateProviderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CreateProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void ModifyProviderCompletedEventHandler(object sender, ModifyProviderCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ModifyProviderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ModifyProviderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void DBInfoCompletedEventHandler(object sender, DBInfoCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DBInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DBInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void User_AuthorizationCompletedEventHandler(object sender, User_AuthorizationCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class User_AuthorizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal User_AuthorizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void Admin_GetUsersListCompletedEventHandler(object sender, Admin_GetUsersListCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Admin_GetUsersListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal Admin_GetUsersListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void Admin_GetRoleListCompletedEventHandler(object sender, Admin_GetRoleListCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Admin_GetRoleListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal Admin_GetRoleListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void Admin_CreateUserCompletedEventHandler(object sender, Admin_CreateUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Admin_CreateUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal Admin_CreateUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void Admin_ModifyUserCompletedEventHandler(object sender, Admin_ModifyUserCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Admin_ModifyUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal Admin_ModifyUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void Info_UPG_GetStorageCompletedEventHandler(object sender, Info_UPG_GetStorageCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class Info_UPG_GetStorageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal Info_UPG_GetStorageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetAllTablesCompletedEventHandler(object sender, GetAllTablesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllTablesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAllTablesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetAllowedTablesCompletedEventHandler(object sender, GetAllowedTablesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetAllowedTablesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetAllowedTablesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetTableExCompletedEventHandler(object sender, GetTableExCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTableExCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetTableExCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetPaymentsQueuesCompletedEventHandler(object sender, GetPaymentsQueuesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPaymentsQueuesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPaymentsQueuesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    public delegate void GetTableCompletedEventHandler(object sender, GetTableCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.0.30319.17626")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ReturnMessage Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ReturnMessage)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591