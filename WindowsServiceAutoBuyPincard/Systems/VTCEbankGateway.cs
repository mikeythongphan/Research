//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.ComponentModel;
using System.Configuration;
using System.Diagnostics;
using System.Threading;
using System.Web.Services;
using System.Web.Services.Description;
using System.Web.Services.Protocols;

// 
// This source code was auto-generated by wsdl, Version=4.0.30319.1.
// 


/// <remarks/>
[GeneratedCode("wsdl", "4.0.30319.1")]
[DebuggerStepThrough]
[DesignerCategory("code")]
[WebServiceBinding(Name = "GoodsPaygateSoap", Namespace = "http://tempuri.org/")]
public class GoodsPaygate : SoapHttpClientProtocol
{
    private SendOrPostCallback RequestTransactionOperationCompleted;

    /// <remarks/>
    public GoodsPaygate()
    {
        //this.Url = "http://localhost:6649/WS/GoodsPaygate.asmx";
        //this.Url = "http://sandbox2.vtcebank.vn/paygate/WS/GoodsPaygate.asmx";
        Url = ConfigurationManager.AppSettings["UrlWS"];
    }

    /// <remarks/>
    public event RequestTransactionCompletedEventHandler RequestTransactionCompleted;

    /// <remarks/>
    [SoapDocumentMethod("http://tempuri.org/RequestTransaction", RequestNamespace = "http://tempuri.org/",
        ResponseNamespace = "http://tempuri.org/", Use = SoapBindingUse.Literal,
        ParameterStyle = SoapParameterStyle.Wrapped)]
    public string RequestTransaction(string requesData, string partnerCode, string commandType, string version)
    {
        object[] results = Invoke("RequestTransaction", new object[]
                                                            {
                                                                requesData,
                                                                partnerCode,
                                                                commandType,
                                                                version
                                                            });
        return ((string)(results[0]));
    }

    /// <remarks/>
    public IAsyncResult BeginRequestTransaction(string requesData, string partnerCode, string commandType,
                                                string version, AsyncCallback callback, object asyncState)
    {
        return BeginInvoke("RequestTransaction", new object[]
                                                     {
                                                         requesData,
                                                         partnerCode,
                                                         commandType,
                                                         version
                                                     }, callback, asyncState);
    }

    /// <remarks/>
    public string EndRequestTransaction(IAsyncResult asyncResult)
    {
        object[] results = EndInvoke(asyncResult);
        return ((string)(results[0]));
    }

    /// <remarks/>
    public void RequestTransactionAsync(string requesData, string partnerCode, string commandType, string version)
    {
        RequestTransactionAsync(requesData, partnerCode, commandType, version, null);
    }

    /// <remarks/>
    public void RequestTransactionAsync(string requesData, string partnerCode, string commandType, string version,
                                        object userState)
    {
        if ((RequestTransactionOperationCompleted == null))
        {
            RequestTransactionOperationCompleted = new SendOrPostCallback(OnRequestTransactionOperationCompleted);
        }
        InvokeAsync("RequestTransaction", new object[]
                                              {
                                                  requesData,
                                                  partnerCode,
                                                  commandType,
                                                  version
                                              }, RequestTransactionOperationCompleted, userState);
    }

    private void OnRequestTransactionOperationCompleted(object arg)
    {
        if ((RequestTransactionCompleted != null))
        {
            var invokeArgs = ((InvokeCompletedEventArgs)(arg));
            RequestTransactionCompleted(this,
                                        new RequestTransactionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error,
                                                                                 invokeArgs.Cancelled,
                                                                                 invokeArgs.UserState));
        }
    }

    /// <remarks/>
    public new void CancelAsync(object userState)
    {
        base.CancelAsync(userState);
    }
}

/// <remarks/>
[GeneratedCode("wsdl", "4.0.30319.1")]
public delegate void RequestTransactionCompletedEventHandler(object sender, RequestTransactionCompletedEventArgs e);

/// <remarks/>
[GeneratedCode("wsdl", "4.0.30319.1")]
[DebuggerStepThrough]
[DesignerCategory("code")]
public class RequestTransactionCompletedEventArgs : AsyncCompletedEventArgs
{
    private readonly object[] results;

    internal RequestTransactionCompletedEventArgs(object[] results, Exception exception, bool cancelled,
                                                  object userState) :
        base(exception, cancelled, userState)
    {
        this.results = results;
    }

    /// <remarks/>
    public string Result
    {
        get
        {
            RaiseExceptionIfNecessary();
            return ((string)(results[0]));
        }
    }
}